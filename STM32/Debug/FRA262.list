
FRA262.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000612c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080062c4  080062c4  000162c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062dc  080062dc  00020488  2**0
                  CONTENTS
  4 .ARM          00000008  080062dc  080062dc  000162dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062e4  080062e4  00020488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062e4  080062e4  000162e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062e8  080062e8  000162e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000488  20000000  080062ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000488  08006774  00020488  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000698  08006774  00020698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020488  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ac0  00000000  00000000  000204b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a6d  00000000  00000000  00032f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  000359e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  00036728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c42  00000000  00000000  00037340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc7f  00000000  00000000  0004df82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008feae  00000000  00000000  0005dc01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  000edaaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003674  00000000  00000000  000edb74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000016fd  00000000  00000000  000f11e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000488 	.word	0x20000488
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080062ac 	.word	0x080062ac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000048c 	.word	0x2000048c
 80001d4:	080062ac 	.word	0x080062ac

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <KalmanMatrixInit>:
#include "main.h"
#include "Kalman.h"
#include "arm_math.h"

void KalmanMatrixInit(KalmanFilterVar *KalmanVar)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	  arm_mat_init_f32(&(KalmanVar ->MatA), 3, 3, KalmanVar ->MatA_Data);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f503 7018 	add.w	r0, r3, #608	; 0x260
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2203      	movs	r2, #3
 8000d2a:	2103      	movs	r1, #3
 8000d2c:	f005 fa24 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatB), 3, 1, KalmanVar ->MatB_Data);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	f503 701a 	add.w	r0, r3, #616	; 0x268
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3324      	adds	r3, #36	; 0x24
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2103      	movs	r1, #3
 8000d3e:	f005 fa1b 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatC), 1, 3, KalmanVar ->MatC_Data);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f503 701c 	add.w	r0, r3, #624	; 0x270
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3330      	adds	r3, #48	; 0x30
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	2101      	movs	r1, #1
 8000d50:	f005 fa12 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatD), 1, 1, KalmanVar ->MatD_Data);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f503 701e 	add.w	r0, r3, #632	; 0x278
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	333c      	adds	r3, #60	; 0x3c
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2101      	movs	r1, #1
 8000d62:	f005 fa09 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatQ), 3, 3, KalmanVar ->MatQ_Data);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f503 7020 	add.w	r0, r3, #640	; 0x280
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3340      	adds	r3, #64	; 0x40
 8000d70:	2203      	movs	r2, #3
 8000d72:	2103      	movs	r1, #3
 8000d74:	f005 fa00 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatR), 1, 1, KalmanVar ->MatR_Data);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f503 7022 	add.w	r0, r3, #648	; 0x288
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3364      	adds	r3, #100	; 0x64
 8000d82:	2201      	movs	r2, #1
 8000d84:	2101      	movs	r1, #1
 8000d86:	f005 f9f7 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatG), 3, 3, KalmanVar ->MatG_Data);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f503 7024 	add.w	r0, r3, #656	; 0x290
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3368      	adds	r3, #104	; 0x68
 8000d94:	2203      	movs	r2, #3
 8000d96:	2103      	movs	r1, #3
 8000d98:	f005 f9ee 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatState), 3, 1, KalmanVar ->MatState_Data);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f503 7026 	add.w	r0, r3, #664	; 0x298
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	338c      	adds	r3, #140	; 0x8c
 8000da6:	2201      	movs	r2, #1
 8000da8:	2103      	movs	r1, #3
 8000daa:	f005 f9e5 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatStateLast), 3, 1, KalmanVar ->MatStateLast_Data);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3398      	adds	r3, #152	; 0x98
 8000db8:	2201      	movs	r2, #1
 8000dba:	2103      	movs	r1, #3
 8000dbc:	f005 f9dc 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredict), 3, 3, KalmanVar ->MatPredict_Data);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f503 702a 	add.w	r0, r3, #680	; 0x2a8
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	33a4      	adds	r3, #164	; 0xa4
 8000dca:	2203      	movs	r2, #3
 8000dcc:	2103      	movs	r1, #3
 8000dce:	f005 f9d3 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPredictLast), 3, 3, KalmanVar ->MatPredictLast_Data);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f503 702c 	add.w	r0, r3, #688	; 0x2b0
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	33c8      	adds	r3, #200	; 0xc8
 8000ddc:	2203      	movs	r2, #3
 8000dde:	2103      	movs	r1, #3
 8000de0:	f005 f9ca 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatY), 1, 1, KalmanVar ->MatY_Data);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f503 702e 	add.w	r0, r3, #696	; 0x2b8
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	33ec      	adds	r3, #236	; 0xec
 8000dee:	2201      	movs	r2, #1
 8000df0:	2101      	movs	r1, #1
 8000df2:	f005 f9c1 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatZ), 1, 1, KalmanVar ->MatZ_Data);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f503 7030 	add.w	r0, r3, #704	; 0x2c0
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	33f0      	adds	r3, #240	; 0xf0
 8000e00:	2201      	movs	r2, #1
 8000e02:	2101      	movs	r1, #1
 8000e04:	f005 f9b8 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatS), 1, 1, KalmanVar ->MatS_Data);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f503 7032 	add.w	r0, r3, #712	; 0x2c8
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	33f4      	adds	r3, #244	; 0xf4
 8000e12:	2201      	movs	r2, #1
 8000e14:	2101      	movs	r1, #1
 8000e16:	f005 f9af 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatK), 3, 1, KalmanVar ->MatK_Data);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f503 7034 	add.w	r0, r3, #720	; 0x2d0
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	33f8      	adds	r3, #248	; 0xf8
 8000e24:	2201      	movs	r2, #1
 8000e26:	2103      	movs	r1, #3
 8000e28:	f005 f9a6 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI), 3, 3, KalmanVar ->MatI_Data);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f503 7036 	add.w	r0, r3, #728	; 0x2d8
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000e38:	2203      	movs	r2, #3
 8000e3a:	2103      	movs	r1, #3
 8000e3c:	f005 f99c 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAt), 3, 3, KalmanVar ->MatAt_Data);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f503 7038 	add.w	r0, r3, #736	; 0x2e0
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	2103      	movs	r1, #3
 8000e50:	f005 f992 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGt), 3, 3, KalmanVar ->MatGt_Data);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f503 703a 	add.w	r0, r3, #744	; 0x2e8
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8000e60:	2203      	movs	r2, #3
 8000e62:	2103      	movs	r1, #3
 8000e64:	f005 f988 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCt), 3, 1, KalmanVar ->MatCt_Data);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f503 703c 	add.w	r0, r3, #752	; 0x2f0
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8000e74:	2201      	movs	r2, #1
 8000e76:	2103      	movs	r1, #3
 8000e78:	f005 f97e 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatGQGt), 3, 3, KalmanVar ->MatGQGt_Data);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f503 7040 	add.w	r0, r3, #768	; 0x300
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000e88:	2203      	movs	r2, #3
 8000e8a:	2103      	movs	r1, #3
 8000e8c:	f005 f974 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatSinv), 1, 1, KalmanVar ->MatSinv_Data);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f503 703e 	add.w	r0, r3, #760	; 0x2f8
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	f005 f96a 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPk), 1, 3, KalmanVar ->MatCPk_Data);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f503 7042 	add.w	r0, r3, #776	; 0x308
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	f005 f960 	bl	8006178 <arm_mat_init_f32>

	  arm_mat_init_f32(&(KalmanVar ->MatAPk), 3, 3, KalmanVar ->MatAPk_Data);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f503 7044 	add.w	r0, r3, #784	; 0x310
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	2103      	movs	r1, #3
 8000ec8:	f005 f956 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatAPkAt), 3, 3, KalmanVar ->MatAPkAt_Data);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f503 7046 	add.w	r0, r3, #792	; 0x318
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 8000ed8:	2203      	movs	r2, #3
 8000eda:	2103      	movs	r1, #3
 8000edc:	f005 f94c 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCXk), 1, 1, KalmanVar ->MatCXk_Data);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f503 7048 	add.w	r0, r3, #800	; 0x320
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000eec:	2201      	movs	r2, #1
 8000eee:	2101      	movs	r1, #1
 8000ef0:	f005 f942 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatCPkCt), 1, 1, KalmanVar ->MatCPkCt_Data);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f503 704a 	add.w	r0, r3, #808	; 0x328
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000f00:	2201      	movs	r2, #1
 8000f02:	2101      	movs	r1, #1
 8000f04:	f005 f938 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatPkCt), 3, 1, KalmanVar ->MatPkCt_Data);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f503 704c 	add.w	r0, r3, #816	; 0x330
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f14:	2201      	movs	r2, #1
 8000f16:	2103      	movs	r1, #3
 8000f18:	f005 f92e 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKYk), 3, 1,KalmanVar ->MatKYk_Data);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f503 704e 	add.w	r0, r3, #824	; 0x338
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8000f28:	2201      	movs	r2, #1
 8000f2a:	2103      	movs	r1, #3
 8000f2c:	f005 f924 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatKC), 3, 3, KalmanVar ->MatKC_Data);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f503 7050 	add.w	r0, r3, #832	; 0x340
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	2103      	movs	r1, #3
 8000f40:	f005 f91a 	bl	8006178 <arm_mat_init_f32>
	  arm_mat_init_f32(&(KalmanVar ->MatI_KC), 3, 3, KalmanVar ->MatI_KC_Data);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f503 7052 	add.w	r0, r3, #840	; 0x348
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000f50:	2203      	movs	r2, #3
 8000f52:	2103      	movs	r1, #3
 8000f54:	f005 f910 	bl	8006178 <arm_mat_init_f32>
	  // Get Transpose
	  arm_mat_trans_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatAt));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 8000f64:	4619      	mov	r1, r3
 8000f66:	4610      	mov	r0, r2
 8000f68:	f004 fe9a 	bl	8005ca0 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatGt));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f503 7224 	add.w	r2, r3, #656	; 0x290
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4610      	mov	r0, r2
 8000f7c:	f004 fe90 	bl	8005ca0 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatCt));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f503 721c 	add.w	r2, r3, #624	; 0x270
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4610      	mov	r0, r2
 8000f90:	f004 fe86 	bl	8005ca0 <arm_mat_trans_f32>
	  // Get Buffer
	  arm_mat_mult_f32(&(KalmanVar ->MatG), &(KalmanVar ->MatQ), &(KalmanVar ->MatGQGt));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f503 7024 	add.w	r0, r3, #656	; 0x290
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f503 7120 	add.w	r1, r3, #640	; 0x280
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	f004 ff40 	bl	8005e2c <arm_mat_mult_f32>
	  arm_mat_mult_f32(&(KalmanVar ->MatGQGt), &(KalmanVar ->MatGt), &(KalmanVar ->MatGQGt));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f503 7040 	add.w	r0, r3, #768	; 0x300
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f503 713a 	add.w	r1, r3, #744	; 0x2e8
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	f004 ff34 	bl	8005e2c <arm_mat_mult_f32>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <KalmanFilterFunction>:

void KalmanFilterFunction(KalmanFilterVar *KalmanVar,float32_t PositionDeg)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	ed87 0a00 	vstr	s0, [r7]
	// 1.Prediction
	// Predicted State Estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatStateLast), &(KalmanVar ->MatState)); // A*Xk-1 ,No B*u
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f503 7018 	add.w	r0, r3, #608	; 0x260
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f503 7128 	add.w	r1, r3, #672	; 0x2a0
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8000fea:	461a      	mov	r2, r3
 8000fec:	f004 ff1e 	bl	8005e2c <arm_mat_mult_f32>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// Predicted error covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatA), &(KalmanVar ->MatPredictLast), &(KalmanVar ->MatAPk)); // A*Pk-1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f503 7018 	add.w	r0, r3, #608	; 0x260
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f503 7344 	add.w	r3, r3, #784	; 0x310
 800100c:	461a      	mov	r2, r3
 800100e:	f004 ff0d 	bl	8005e2c <arm_mat_mult_f32>
 8001012:	4603      	mov	r3, r0
 8001014:	461a      	mov	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatAPk), &(KalmanVar ->MatAt), &(KalmanVar ->MatAPkAt)); // A*Pk-1*At
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f503 7044 	add.w	r0, r3, #784	; 0x310
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f503 7138 	add.w	r1, r3, #736	; 0x2e0
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f503 7346 	add.w	r3, r3, #792	; 0x318
 800102e:	461a      	mov	r2, r3
 8001030:	f004 fefc 	bl	8005e2c <arm_mat_mult_f32>
 8001034:	4603      	mov	r3, r0
 8001036:	461a      	mov	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatAPkAt), &(KalmanVar ->MatGQGt), &(KalmanVar ->MatPredict)); // A*Pk-1*At + GQGt
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f503 7046 	add.w	r0, r3, #792	; 0x318
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f503 7140 	add.w	r1, r3, #768	; 0x300
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8001050:	461a      	mov	r2, r3
 8001052:	f005 f895 	bl	8006180 <arm_mat_add_f32>
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// 2.Correction
	// Innovation residual
	KalmanVar -> MatZ_Data[0] = PositionDeg; // Sensor Input
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatState), &(KalmanVar ->MatCXk)); // C*Xk
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f503 701c 	add.w	r0, r3, #624	; 0x270
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f503 7348 	add.w	r3, r3, #800	; 0x320
 800107a:	461a      	mov	r2, r3
 800107c:	f004 fed6 	bl	8005e2c <arm_mat_mult_f32>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatZ), &(KalmanVar ->MatCXk), &(KalmanVar ->MatY)); // Zk - C*Xk
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f503 7030 	add.w	r0, r3, #704	; 0x2c0
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f503 7148 	add.w	r1, r3, #800	; 0x320
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 800109c:	461a      	mov	r2, r3
 800109e:	f004 fe5b 	bl	8005d58 <arm_mat_sub_f32>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// Innovation covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatCPk)); // C*Pk
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f503 701c 	add.w	r0, r3, #624	; 0x270
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f503 712a 	add.w	r1, r3, #680	; 0x2a8
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f503 7342 	add.w	r3, r3, #776	; 0x308
 80010be:	461a      	mov	r2, r3
 80010c0:	f004 feb4 	bl	8005e2c <arm_mat_mult_f32>
 80010c4:	4603      	mov	r3, r0
 80010c6:	461a      	mov	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatCPk), &(KalmanVar ->MatCt), &(KalmanVar ->MatCPkCt)); // C*Pk*Ct
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f503 7042 	add.w	r0, r3, #776	; 0x308
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f503 713c 	add.w	r1, r3, #752	; 0x2f0
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f503 734a 	add.w	r3, r3, #808	; 0x328
 80010e0:	461a      	mov	r2, r3
 80010e2:	f004 fea3 	bl	8005e2c <arm_mat_mult_f32>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatCPkCt), &(KalmanVar ->MatR), &(KalmanVar ->MatS)); // C*Pk*Ct + R
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f503 704a 	add.w	r0, r3, #808	; 0x328
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f503 7122 	add.w	r1, r3, #648	; 0x288
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f503 7332 	add.w	r3, r3, #712	; 0x2c8
 8001102:	461a      	mov	r2, r3
 8001104:	f005 f83c 	bl	8006180 <arm_mat_add_f32>
 8001108:	4603      	mov	r3, r0
 800110a:	461a      	mov	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_inverse_f32(&(KalmanVar ->MatS), &(KalmanVar ->MatSinv)); // S inverse
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f503 7232 	add.w	r2, r3, #712	; 0x2c8
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 800111e:	4619      	mov	r1, r3
 8001120:	4610      	mov	r0, r2
 8001122:	f004 ff23 	bl	8005f6c <arm_mat_inverse_f32>
 8001126:	4603      	mov	r3, r0
 8001128:	461a      	mov	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// Optimal Kalman gain
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPredict), &(KalmanVar ->MatCt), &(KalmanVar ->MatPkCt)); // Pk*Ct
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f503 702a 	add.w	r0, r3, #680	; 0x2a8
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f503 713c 	add.w	r1, r3, #752	; 0x2f0
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8001142:	461a      	mov	r2, r3
 8001144:	f004 fe72 	bl	8005e2c <arm_mat_mult_f32>
 8001148:	4603      	mov	r3, r0
 800114a:	461a      	mov	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatPkCt), &(KalmanVar ->MatSinv), &(KalmanVar ->MatK)); // Pk*Ct*Sinv
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f503 704c 	add.w	r0, r3, #816	; 0x330
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f503 713e 	add.w	r1, r3, #760	; 0x2f8
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f503 7334 	add.w	r3, r3, #720	; 0x2d0
 8001164:	461a      	mov	r2, r3
 8001166:	f004 fe61 	bl	8005e2c <arm_mat_mult_f32>
 800116a:	4603      	mov	r3, r0
 800116c:	461a      	mov	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// Corrected state estimate
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatY), &(KalmanVar ->MatKYk)); // K*Yk
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f503 7034 	add.w	r0, r3, #720	; 0x2d0
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f503 712e 	add.w	r1, r3, #696	; 0x2b8
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8001186:	461a      	mov	r2, r3
 8001188:	f004 fe50 	bl	8005e2c <arm_mat_mult_f32>
 800118c:	4603      	mov	r3, r0
 800118e:	461a      	mov	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_add_f32(&(KalmanVar ->MatKYk), &(KalmanVar ->MatState), &(KalmanVar ->MatStateLast)); // Xk+K*Yk
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f503 704e 	add.w	r0, r3, #824	; 0x338
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
 80011a8:	461a      	mov	r2, r3
 80011aa:	f004 ffe9 	bl	8006180 <arm_mat_add_f32>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	// Corrected estimate covariance
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatK), &(KalmanVar ->MatC), &(KalmanVar ->MatKC)); //K*C
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f503 7034 	add.w	r0, r3, #720	; 0x2d0
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f503 711c 	add.w	r1, r3, #624	; 0x270
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f503 7350 	add.w	r3, r3, #832	; 0x340
 80011ca:	461a      	mov	r2, r3
 80011cc:	f004 fe2e 	bl	8005e2c <arm_mat_mult_f32>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_sub_f32(&(KalmanVar ->MatI), &(KalmanVar ->MatKC), &(KalmanVar ->MatI_KC)); // I-K*C
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f503 7036 	add.w	r0, r3, #728	; 0x2d8
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f503 7150 	add.w	r1, r3, #832	; 0x340
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80011ec:	461a      	mov	r2, r3
 80011ee:	f004 fdb3 	bl	8005d58 <arm_mat_sub_f32>
 80011f2:	4603      	mov	r3, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
	KalmanVar ->Kalmanstatus = arm_mat_mult_f32(&(KalmanVar ->MatI_KC), &(KalmanVar ->MatPredict), &(KalmanVar ->MatPredictLast)); // (I-K*C)*Pk
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f503 7052 	add.w	r0, r3, #840	; 0x348
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f503 712a 	add.w	r1, r3, #680	; 0x2a8
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800120e:	461a      	mov	r2, r3
 8001210:	f004 fe0c 	bl	8005e2c <arm_mat_mult_f32>
 8001214:	4603      	mov	r3, r0
 8001216:	461a      	mov	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f883 2350 	strb.w	r2, [r3, #848]	; 0x350
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <PIDController_Init>:
#include "PID.h"

void PIDController_Init(PIDController *pid) {
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0.0f;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	625a      	str	r2, [r3, #36]	; 0x24
	pid->prevError  = 0.0f;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	629a      	str	r2, [r3, #40]	; 0x28

	pid->differentiator  = 0.0f;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->prevMeasurement = 0.0f;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	631a      	str	r2, [r3, #48]	; 0x30

	pid->out = 0.0f;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 8001262:	b480      	push	{r7}
 8001264:	b087      	sub	sp, #28
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	ed87 0a02 	vstr	s0, [r7, #8]
 800126e:	edc7 0a01 	vstr	s1, [r7, #4]

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 8001272:	ed97 7a02 	vldr	s14, [r7, #8]
 8001276:	edd7 7a01 	vldr	s15, [r7, #4]
 800127a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800127e:	edc7 7a05 	vstr	s15, [r7, #20]


	/*
	* Proportional
	*/
    float proportional = pid->Kp * error;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	edd3 7a00 	vldr	s15, [r3]
 8001288:	ed97 7a05 	vldr	s14, [r7, #20]
 800128c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001290:	edc7 7a04 	vstr	s15, [r7, #16]


	/*
	* Integral
	*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	edd3 7a01 	vldr	s15, [r3, #4]
 80012a0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80012a4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	edd3 7a08 	vldr	s15, [r3, #32]
 80012ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 80012b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80012bc:	ee76 7a27 	vadd.f32	s15, s12, s15
 80012c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator > pid->limMaxInt) {
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	edd3 7a07 	vldr	s15, [r3, #28]
 80012da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e2:	dd04      	ble.n	80012ee <PIDController_Update+0x8c>

        pid->integrator = pid->limMaxInt;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	69da      	ldr	r2, [r3, #28]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	625a      	str	r2, [r3, #36]	; 0x24
 80012ec:	e00e      	b.n	800130c <PIDController_Update+0xaa>

    } else if (pid->integrator < pid->limMinInt) {
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80012fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	d503      	bpl.n	800130c <PIDController_Update+0xaa>

        pid->integrator = pid->limMinInt;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	699a      	ldr	r2, [r3, #24]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	625a      	str	r2, [r3, #36]	; 0x24

	/*
	* Derivative (band-limited differentiator)
	*/
		
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001312:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800131c:	edd7 6a01 	vldr	s13, [r7, #4]
 8001320:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001324:	ee27 7a27 	vmul.f32	s14, s14, s15
                        + (2.0f * pid->tau - pid->T) * pid->differentiator)
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	edd3 7a03 	vldr	s15, [r3, #12]
 800132e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	edd3 7a08 	vldr	s15, [r3, #32]
 8001338:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001342:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001346:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 800134a:	eef1 6a67 	vneg.f32	s13, s15
                        / (2.0f * pid->tau + pid->T);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	edd3 7a03 	vldr	s15, [r3, #12]
 8001354:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	edd3 7a08 	vldr	s15, [r3, #32]
 800135e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001362:	eec6 7a87 	vdiv.f32	s15, s13, s14
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c


	/*
	* Compute output and apply limits
	*/
    pid->out = proportional + pid->integrator + pid->differentiator;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001372:	edd7 7a04 	vldr	s15, [r7, #16]
 8001376:	ee37 7a27 	vadd.f32	s14, s14, s15
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001380:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    if (pid->out > pid->limMax) {
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	edd3 7a05 	vldr	s15, [r3, #20]
 8001396:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800139a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139e:	dd04      	ble.n	80013aa <PIDController_Update+0x148>

        pid->out = pid->limMax;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	695a      	ldr	r2, [r3, #20]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	635a      	str	r2, [r3, #52]	; 0x34
 80013a8:	e00e      	b.n	80013c8 <PIDController_Update+0x166>

    } else if (pid->out < pid->limMin) {
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	edd3 7a04 	vldr	s15, [r3, #16]
 80013b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013be:	d503      	bpl.n	80013c8 <PIDController_Update+0x166>

        pid->out = pid->limMin;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	691a      	ldr	r2, [r3, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	635a      	str	r2, [r3, #52]	; 0x34

    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	629a      	str	r2, [r3, #40]	; 0x28
    pid->prevMeasurement = measurement;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	687a      	ldr	r2, [r7, #4]
 80013d2:	631a      	str	r2, [r3, #48]	; 0x30

	/* Return controller output */
    return pid->out;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d8:	ee07 3a90 	vmov	s15, r3

}
 80013dc:	eeb0 0a67 	vmov.f32	s0, s15
 80013e0:	371c      	adds	r7, #28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <PIDVelocityController_Init>:
 *  Created on: 4 Jun 2022
 *      Author: mobil
 */

#include "PIDVelocity.h"
void  PIDVelocityController_Init(PIDVelocityController *pidVelocity){
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]

	pidVelocity->Last1Error = 0.0f;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f04f 0200 	mov.w	r2, #0
 80013f8:	625a      	str	r2, [r3, #36]	; 0x24
	pidVelocity->Last2Error = 0.0f;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	629a      	str	r2, [r3, #40]	; 0x28

	pidVelocity->differentiatorOutput = 0.0f;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
	pidVelocity->integratorOutput = 0.0f;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	619a      	str	r2, [r3, #24]
	pidVelocity->proportionalOutput = 0.0f;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	621a      	str	r2, [r3, #32]

	pidVelocity->ControllerOut = 0.0f;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	62da      	str	r2, [r3, #44]	; 0x2c
	pidVelocity->ControllerLastOut = 0.0f;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	631a      	str	r2, [r3, #48]	; 0x30
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <VmaxOptimization>:


#include "Trajectory.h"


float VmaxOptimization(float Qinitial, float Qfinal){
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001442:	edc7 0a00 	vstr	s1, [r7]
	float Qrelative = Qfinal - Qinitial;
 8001446:	ed97 7a00 	vldr	s14, [r7]
 800144a:	edd7 7a01 	vldr	s15, [r7, #4]
 800144e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001452:	edc7 7a02 	vstr	s15, [r7, #8]
	float Vmax = -1;
 8001456:	4b35      	ldr	r3, [pc, #212]	; (800152c <VmaxOptimization+0xf4>)
 8001458:	60fb      	str	r3, [r7, #12]
	if(Qrelative >= 1.0  && Qrelative < 20.0)
 800145a:	edd7 7a02 	vldr	s15, [r7, #8]
 800145e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001462:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146a:	db0b      	blt.n	8001484 <VmaxOptimization+0x4c>
 800146c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001470:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8001474:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147c:	d502      	bpl.n	8001484 <VmaxOptimization+0x4c>
	{
		Vmax = 0.7f;
 800147e:	4b2c      	ldr	r3, [pc, #176]	; (8001530 <VmaxOptimization+0xf8>)
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	e034      	b.n	80014ee <VmaxOptimization+0xb6>
	}
	else if(Qrelative >= 20.0  && Qrelative < 60.0)
 8001484:	edd7 7a02 	vldr	s15, [r7, #8]
 8001488:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800148c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001494:	db0b      	blt.n	80014ae <VmaxOptimization+0x76>
 8001496:	edd7 7a02 	vldr	s15, [r7, #8]
 800149a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001534 <VmaxOptimization+0xfc>
 800149e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a6:	d502      	bpl.n	80014ae <VmaxOptimization+0x76>
	{
		Vmax = 3.0f;
 80014a8:	4b23      	ldr	r3, [pc, #140]	; (8001538 <VmaxOptimization+0x100>)
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	e01f      	b.n	80014ee <VmaxOptimization+0xb6>
	}
	else if(Qrelative >= 60.0  && Qrelative < 160.0)
 80014ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80014b2:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001534 <VmaxOptimization+0xfc>
 80014b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014be:	db0b      	blt.n	80014d8 <VmaxOptimization+0xa0>
 80014c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80014c4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800153c <VmaxOptimization+0x104>
 80014c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d0:	d502      	bpl.n	80014d8 <VmaxOptimization+0xa0>
	{
		Vmax = 6.0f;
 80014d2:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <VmaxOptimization+0x108>)
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	e00a      	b.n	80014ee <VmaxOptimization+0xb6>
	}
	else if(Qrelative >= 160.0)
 80014d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80014dc:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800153c <VmaxOptimization+0x104>
 80014e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e8:	db01      	blt.n	80014ee <VmaxOptimization+0xb6>
	{
		Vmax = 10.0f;
 80014ea:	4b16      	ldr	r3, [pc, #88]	; (8001544 <VmaxOptimization+0x10c>)
 80014ec:	60fb      	str	r3, [r7, #12]
	}
	// RPM to deg/sec
	return Vmax *360.0/60.0;
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f7fe ffd6 	bl	80004a0 <__aeabi_f2d>
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	4b13      	ldr	r3, [pc, #76]	; (8001548 <VmaxOptimization+0x110>)
 80014fa:	f7ff f829 	bl	8000550 <__aeabi_dmul>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <VmaxOptimization+0x114>)
 800150c:	f7ff f94a 	bl	80007a4 <__aeabi_ddiv>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff fa2c 	bl	8000974 <__aeabi_d2f>
 800151c:	4603      	mov	r3, r0
 800151e:	ee07 3a90 	vmov	s15, r3
}
 8001522:	eeb0 0a67 	vmov.f32	s0, s15
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	bf800000 	.word	0xbf800000
 8001530:	3f333333 	.word	0x3f333333
 8001534:	42700000 	.word	0x42700000
 8001538:	40400000 	.word	0x40400000
 800153c:	43200000 	.word	0x43200000
 8001540:	40c00000 	.word	0x40c00000
 8001544:	41200000 	.word	0x41200000
 8001548:	40768000 	.word	0x40768000
 800154c:	404e0000 	.word	0x404e0000

08001550 <CoefficientAndTimeCalculation>:

void CoefficientAndTimeCalculation(TrajectoryG *traject, float Qinitial, float Qfinal){
 8001550:	b5b0      	push	{r4, r5, r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	ed87 0a02 	vstr	s0, [r7, #8]
 800155c:	edc7 0a01 	vstr	s1, [r7, #4]

	traject -> Qin = Qinitial;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	traject -> Qfinal = Qfinal;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	// Set initial = 0;
	float Qrelative = Qfinal - Qinitial;
 8001570:	ed97 7a01 	vldr	s14, [r7, #4]
 8001574:	edd7 7a02 	vldr	s15, [r7, #8]
 8001578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800157c:	edc7 7a05 	vstr	s15, [r7, #20]
	// Set Vmax
	traject -> Vmax = VmaxOptimization(Qinitial,Qfinal);
 8001580:	edd7 0a01 	vldr	s1, [r7, #4]
 8001584:	ed97 0a02 	vldr	s0, [r7, #8]
 8001588:	f7ff ff56 	bl	8001438 <VmaxOptimization>
 800158c:	eef0 7a40 	vmov.f32	s15, s0
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	edc3 7a02 	vstr	s15, [r3, #8]

	// Calculate time
	traject -> T[6] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax) + (Qrelative/traject -> Vmax);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	edd3 6a00 	vldr	s13, [r3]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	edd3 7a01 	vldr	s15, [r3, #4]
 80015a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	ed93 6a02 	vldr	s12, [r3, #8]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	edd3 6a00 	vldr	s13, [r3]
 80015b2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80015b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	edd3 6a02 	vldr	s13, [r3, #8]
 80015c0:	ed97 6a05 	vldr	s12, [r7, #20]
 80015c4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80015c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
	traject -> T[0] = (traject -> Amax/traject -> Jmax);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	edd3 6a00 	vldr	s13, [r3]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	ed93 7a01 	vldr	s14, [r3, #4]
 80015de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	traject -> T[1] = (traject -> Vmax/traject -> Amax);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	edd3 6a02 	vldr	s13, [r3, #8]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	ed93 7a00 	vldr	s14, [r3]
 80015f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
	traject -> T[2] = (traject -> Amax/traject -> Jmax) + (traject -> Vmax/traject -> Amax);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	edd3 6a00 	vldr	s13, [r3]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	edd3 7a01 	vldr	s15, [r3, #4]
 800160a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	ed93 6a02 	vldr	s12, [r3, #8]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	edd3 6a00 	vldr	s13, [r3]
 800161a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800161e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
	traject -> T[3] = traject -> T[6] - traject -> T[2];
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	traject -> T[4] = traject -> T[6] - traject -> T[1];
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800164a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	traject -> T[5] = traject -> T[6] - traject -> T[0];
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001660:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90

	traject -> A[0] = traject -> Jmax;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	60da      	str	r2, [r3, #12]
	traject -> A[1] = 0;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
	traject -> A[2] = -1.0 * traject -> Jmax;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff0e 	bl	80004a0 <__aeabi_f2d>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4610      	mov	r0, r2
 800168a:	4619      	mov	r1, r3
 800168c:	f7ff f972 	bl	8000974 <__aeabi_d2f>
 8001690:	4603      	mov	r3, r0
 8001692:	ee07 3a90 	vmov	s15, r3
 8001696:	eef1 7a67 	vneg.f32	s15, s15
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	edc3 7a05 	vstr	s15, [r3, #20]
	traject -> A[3] = 0;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
	traject -> A[4] = -1.0 * traject -> Jmax;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe fef7 	bl	80004a0 <__aeabi_f2d>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	f7ff f95b 	bl	8000974 <__aeabi_d2f>
 80016be:	4603      	mov	r3, r0
 80016c0:	ee07 3a90 	vmov	s15, r3
 80016c4:	eef1 7a67 	vneg.f32	s15, s15
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	edc3 7a07 	vstr	s15, [r3, #28]
	traject -> A[5] = 0;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	621a      	str	r2, [r3, #32]
	traject -> A[6] = traject -> Jmax;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24

	traject -> B[0] = 0;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	629a      	str	r2, [r3, #40]	; 0x28
	traject -> B[1] = traject -> Amax;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	62da      	str	r2, [r3, #44]	; 0x2c
	traject -> B[2] = traject -> Amax + (traject -> Jmax * traject -> T[1]);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	ed93 7a00 	vldr	s14, [r3]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	edd3 6a01 	vldr	s13, [r3, #4]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001700:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001704:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	traject -> B[3] = 0;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	635a      	str	r2, [r3, #52]	; 0x34
	traject -> B[4] = traject -> Jmax * traject -> T[3];
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	ed93 7a01 	vldr	s14, [r3, #4]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	traject -> B[5] = (-1.0 * traject ->Amax);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7fe feb5 	bl	80004a0 <__aeabi_f2d>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	f7ff f919 	bl	8000974 <__aeabi_d2f>
 8001742:	4603      	mov	r3, r0
 8001744:	ee07 3a90 	vmov	s15, r3
 8001748:	eef1 7a67 	vneg.f32	s15, s15
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	traject -> B[6] = (-1.0 * traject ->Amax) - (traject -> Jmax * traject -> T[5]);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fea2 	bl	80004a0 <__aeabi_f2d>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4614      	mov	r4, r2
 8001762:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	ed93 7a01 	vldr	s14, [r3, #4]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001776:	ee17 0a90 	vmov	r0, s15
 800177a:	f7fe fe91 	bl	80004a0 <__aeabi_f2d>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe fd2b 	bl	80001e0 <__aeabi_dsub>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	f7ff f8ef 	bl	8000974 <__aeabi_d2f>
 8001796:	4602      	mov	r2, r0
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	641a      	str	r2, [r3, #64]	; 0x40

	traject -> C[0] = 0;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	645a      	str	r2, [r3, #68]	; 0x44
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	ed93 7a03 	vldr	s14, [r3, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80017b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017be:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80017c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80017d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80017e0:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[1]*(traject -> T[0] * traject -> T[0]))/2+traject -> B[1]*traject -> T[0]);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	edd3 6a04 	vldr	s13, [r3, #16]
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 80017f6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80017fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017fe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001802:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001812:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800181a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0]))/2+ traject -> B[0] * traject -> T[0] + traject -> C[0])
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	ed93 7a04 	vldr	s14, [r3, #16]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001836:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800183a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800183e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001842:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001852:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001856:	ee37 7a27 	vadd.f32	s14, s14, s15
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001860:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[2]*(traject -> T[1] * traject -> T[1]))/2+traject -> B[2]*traject -> T[1]);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	edd3 6a05 	vldr	s13, [r3, #20]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001876:	ee66 7a27 	vmul.f32	s15, s12, s15
 800187a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800187e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001882:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001892:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800189a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1]))/2+ traject -> B[1] * traject -> T[1] + traject -> C[1])
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	ed93 7a05 	vldr	s14, [r3, #20]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80018b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018be:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80018c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80018d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80018e0:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[3]*(traject -> T[2] * traject -> T[2]))/2+traject -> B[3]*traject -> T[2]);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	edd3 6a06 	vldr	s13, [r3, #24]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80018f6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018fe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001902:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001912:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800191a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2]))/2+ traject -> B[2] * traject -> T[2] + traject -> C[2])
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	ed93 7a06 	vldr	s14, [r3, #24]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001936:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800193a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001942:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001952:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001956:	ee37 7a27 	vadd.f32	s14, s14, s15
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001960:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[4]*(traject -> T[3] * traject -> T[3]))/2+traject -> B[4]*traject -> T[3]);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	edd3 6a07 	vldr	s13, [r3, #28]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001976:	ee66 7a27 	vmul.f32	s15, s12, s15
 800197a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800197e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001982:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001992:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800199a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3]))/2+ traject -> B[3] * traject -> T[3] + traject -> C[3])
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	ed93 7a07 	vldr	s14, [r3, #28]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80019b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019be:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80019c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80019d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80019e0:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[5]*(traject -> T[4] * traject -> T[4]))/2+traject -> B[5]*traject -> T[4]);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	edd3 6a08 	vldr	s13, [r3, #32]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80019f6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019fe:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001a02:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001a12:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a1a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4]))/2+ traject -> B[4] * traject -> T[4] + traject -> C[4])
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	ed93 7a08 	vldr	s14, [r3, #32]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a42:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001a52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001a60:	ee37 7a27 	vadd.f32	s14, s14, s15
					-((traject -> A[6]*(traject -> T[5] * traject -> T[5]))/2+traject -> B[6]*traject -> T[5]);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001a76:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a7e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001a82:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001a92:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> C[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5]))/2+ traject -> B[5] * traject -> T[5] + traject -> C[5])
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

	traject -> D[0] = 0;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	661a      	str	r2, [r3, #96]	; 0x60
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001abe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001ac8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad0:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001ad4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[0]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[0]*(traject -> T[0]) + traject -> D[0])
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001aea:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001aee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001af2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001af6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001afa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001b0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001b18:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	ed93 6a1f 	vldr	s12, [r3, #124]	; 0x7c
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001b2e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001b38:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b40:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001b44:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[1]*(traject -> T[0] * traject -> T[0]))/2 + traject -> C[1]* traject -> T[0]);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	ed93 6a0b 	vldr	s12, [r3, #44]	; 0x2c
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	edd3 5a1f 	vldr	s11, [r3, #124]	; 0x7c
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001b5a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001b5e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001b62:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b6a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001b7a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[1]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001b82:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[1] = ((traject -> A[0]*(traject -> T[0] * traject -> T[0] * traject -> T[0]))/6
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001b9e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001ba8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb0:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001bb4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[1]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[1]*(traject -> T[1]) + traject -> D[1])
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001bca:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bce:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bd2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001bd6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001bda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001bea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8001bf8:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	edd3 6a05 	vldr	s13, [r3, #20]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001c0e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001c18:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c20:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001c24:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[2]*(traject -> T[1] * traject -> T[1]))/2 + traject -> C[2]* traject -> T[1]);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	edd3 5a20 	vldr	s11, [r3, #128]	; 0x80
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001c3a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c3e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c42:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001c4a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	ed93 6a13 	vldr	s12, [r3, #76]	; 0x4c
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001c5a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[2]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001c62:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[2] = ((traject -> A[1]*(traject -> T[1] * traject -> T[1] * traject -> T[1]))/6
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	edd3 6a21 	vldr	s13, [r3, #132]	; 0x84
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001c7e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001c88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c90:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001c94:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[2]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[2]*(traject -> T[2]) + traject -> D[2])
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001caa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001cb2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001cb6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001cba:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001cca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001cd8:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	edd3 6a06 	vldr	s13, [r3, #24]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	ed93 6a21 	vldr	s12, [r3, #132]	; 0x84
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001cee:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001cf8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d00:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001d04:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[3]*(traject -> T[2] * traject -> T[2]))/2 + traject -> C[3]* traject -> T[2]);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	edd3 5a21 	vldr	s11, [r3, #132]	; 0x84
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d1a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001d1e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001d22:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d2a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 8001d3a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[3]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001d42:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[3] = ((traject -> A[2]*(traject -> T[2] * traject -> T[2] * traject -> T[2]))/6
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001d5e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001d68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d70:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001d74:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[3]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[3]*(traject -> T[3]) + traject -> D[3])
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001d8a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d8e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d92:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001d96:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001d9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001daa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001db8:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	edd3 6a07 	vldr	s13, [r3, #28]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	ed93 6a22 	vldr	s12, [r3, #136]	; 0x88
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001dce:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001dd8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ddc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de0:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001de4:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[4]*(traject -> T[3] * traject -> T[3]))/2 + traject -> C[4]* traject -> T[3]);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	ed93 6a0e 	vldr	s12, [r3, #56]	; 0x38
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	edd3 5a22 	vldr	s11, [r3, #136]	; 0x88
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001dfa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001dfe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e02:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e0a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	ed93 6a15 	vldr	s12, [r3, #84]	; 0x54
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001e1a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[4]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001e22:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[4] = ((traject -> A[3]*(traject -> T[3] * traject -> T[3] * traject -> T[3]))/6
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001e3e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001e48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e50:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001e54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[4]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[4]*(traject -> T[4]) + traject -> D[4])
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001e6a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001e6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001e72:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001e76:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001e7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001e8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001e98:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	edd3 6a08 	vldr	s13, [r3, #32]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001eae:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001eb8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ebc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ec0:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001ec4:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[5]*(traject -> T[4] * traject -> T[4]))/2 + traject -> C[5]* traject -> T[4]);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	edd3 5a23 	vldr	s11, [r3, #140]	; 0x8c
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001eda:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001ede:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ee2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	ed93 6a16 	vldr	s12, [r3, #88]	; 0x58
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001efa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[5]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8001f02:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[5] = ((traject -> A[4]*(traject -> T[4] * traject -> T[4] * traject -> T[4]))/6
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001f1e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001f28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f30:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001f34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
					+ (traject -> B[5]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[5]*(traject -> T[5]) + traject -> D[5])
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001f4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f52:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001f56:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8001f78:	ee37 7a27 	vadd.f32	s14, s14, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	ed93 6a24 	vldr	s12, [r3, #144]	; 0x90
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001f8e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001f98:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa0:	eeb1 6a08 	vmov.f32	s12, #24	; 0x40c00000  6.0
 8001fa4:	eec7 6a86 	vdiv.f32	s13, s15, s12
					+ (traject -> B[6]*(traject -> T[5] * traject -> T[5]))/2 + traject -> C[6]* traject -> T[5]);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	edd3 5a24 	vldr	s11, [r3, #144]	; 0x90
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001fba:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001fbe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001fc2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	ed93 6a17 	vldr	s12, [r3, #92]	; 0x5c
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8001fda:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
					- ((traject -> A[6]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8001fe2:	ee77 7a67 	vsub.f32	s15, s14, s15
	traject -> D[6] = ((traject -> A[5]*(traject -> T[5] * traject -> T[5] * traject -> T[5]))/6
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
}
 8001fec:	bf00      	nop
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ff4:	0000      	movs	r0, r0
	...

08001ff8 <TrajectoryEvaluation>:


float TrajectoryEvaluation(TrajectoryG *traject , uint64_t StartTime, uint64_t CurrentTime){
 8001ff8:	b5b0      	push	{r4, r5, r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	e9c7 2300 	strd	r2, r3, [r7]
	// Microsec to sec
	static float t = 0;
	t  = (CurrentTime - StartTime)/1000000.0;
 8002004:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800200c:	1a84      	subs	r4, r0, r2
 800200e:	eb61 0503 	sbc.w	r5, r1, r3
 8002012:	4620      	mov	r0, r4
 8002014:	4629      	mov	r1, r5
 8002016:	f7fe fa65 	bl	80004e4 <__aeabi_ul2d>
 800201a:	a392      	add	r3, pc, #584	; (adr r3, 8002264 <TrajectoryEvaluation+0x26c>)
 800201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002020:	f7fe fbc0 	bl	80007a4 <__aeabi_ddiv>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4610      	mov	r0, r2
 800202a:	4619      	mov	r1, r3
 800202c:	f7fe fca2 	bl	8000974 <__aeabi_d2f>
 8002030:	4603      	mov	r3, r0
 8002032:	4a8b      	ldr	r2, [pc, #556]	; (8002260 <TrajectoryEvaluation+0x268>)
 8002034:	6013      	str	r3, [r2, #0]

	if(t >= 0 && t < traject -> T[0])
 8002036:	4b8a      	ldr	r3, [pc, #552]	; (8002260 <TrajectoryEvaluation+0x268>)
 8002038:	edd3 7a00 	vldr	s15, [r3]
 800203c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002044:	db7e      	blt.n	8002144 <TrajectoryEvaluation+0x14c>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800204c:	4b84      	ldr	r3, [pc, #528]	; (8002260 <TrajectoryEvaluation+0x268>)
 800204e:	edd3 7a00 	vldr	s15, [r3]
 8002052:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800205a:	dd73      	ble.n	8002144 <TrajectoryEvaluation+0x14c>
	{
		traject -> QJ = traject -> A[0];
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[0]*t + traject -> B[0];
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	ed93 7a03 	vldr	s14, [r3, #12]
 800206c:	4b7c      	ldr	r3, [pc, #496]	; (8002260 <TrajectoryEvaluation+0x268>)
 800206e:	edd3 7a00 	vldr	s15, [r3]
 8002072:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800207c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[0]*(t*t)/2 + traject -> B[0]*t + traject -> C[0];
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	ed93 7a03 	vldr	s14, [r3, #12]
 800208c:	4b74      	ldr	r3, [pc, #464]	; (8002260 <TrajectoryEvaluation+0x268>)
 800208e:	edd3 6a00 	vldr	s13, [r3]
 8002092:	4b73      	ldr	r3, [pc, #460]	; (8002260 <TrajectoryEvaluation+0x268>)
 8002094:	edd3 7a00 	vldr	s15, [r3]
 8002098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800209c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80020a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80020ae:	4b6c      	ldr	r3, [pc, #432]	; (8002260 <TrajectoryEvaluation+0x268>)
 80020b0:	edd3 7a00 	vldr	s15, [r3]
 80020b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80020c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[0]*(t*t*t)/6 + traject -> B[0]*(t*t)/2 + traject -> C[0]*t + traject -> D[0];
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80020d2:	4b63      	ldr	r3, [pc, #396]	; (8002260 <TrajectoryEvaluation+0x268>)
 80020d4:	edd3 6a00 	vldr	s13, [r3]
 80020d8:	4b61      	ldr	r3, [pc, #388]	; (8002260 <TrajectoryEvaluation+0x268>)
 80020da:	edd3 7a00 	vldr	s15, [r3]
 80020de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020e2:	4b5f      	ldr	r3, [pc, #380]	; (8002260 <TrajectoryEvaluation+0x268>)
 80020e4:	edd3 7a00 	vldr	s15, [r3]
 80020e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f0:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80020f4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80020fe:	4b58      	ldr	r3, [pc, #352]	; (8002260 <TrajectoryEvaluation+0x268>)
 8002100:	ed93 6a00 	vldr	s12, [r3]
 8002104:	4b56      	ldr	r3, [pc, #344]	; (8002260 <TrajectoryEvaluation+0x268>)
 8002106:	edd3 7a00 	vldr	s15, [r3]
 800210a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800210e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002112:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002116:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800211a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 8002124:	4b4e      	ldr	r3, [pc, #312]	; (8002260 <TrajectoryEvaluation+0x268>)
 8002126:	edd3 7a00 	vldr	s15, [r3]
 800212a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800212e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 8002142:	e361      	b.n	8002808 <TrajectoryEvaluation+0x810>
	}
	else if( t >= traject -> T[0] && t < traject -> T[1])
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800214a:	4b45      	ldr	r3, [pc, #276]	; (8002260 <TrajectoryEvaluation+0x268>)
 800214c:	edd3 7a00 	vldr	s15, [r3]
 8002150:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002158:	f200 8088 	bhi.w	800226c <TrajectoryEvaluation+0x274>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8002162:	4b3f      	ldr	r3, [pc, #252]	; (8002260 <TrajectoryEvaluation+0x268>)
 8002164:	edd3 7a00 	vldr	s15, [r3]
 8002168:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800216c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002170:	dd7c      	ble.n	800226c <TrajectoryEvaluation+0x274>
	{
		traject -> QJ = traject -> A[1];
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	691a      	ldr	r2, [r3, #16]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[1]*t + traject -> B[1];
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002182:	4b37      	ldr	r3, [pc, #220]	; (8002260 <TrajectoryEvaluation+0x268>)
 8002184:	edd3 7a00 	vldr	s15, [r3]
 8002188:	ee27 7a27 	vmul.f32	s14, s14, s15
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[1]*(t*t)/2 + traject -> B[1]*t + traject -> C[1];
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	ed93 7a04 	vldr	s14, [r3, #16]
 80021a2:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <TrajectoryEvaluation+0x268>)
 80021a4:	edd3 6a00 	vldr	s13, [r3]
 80021a8:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <TrajectoryEvaluation+0x268>)
 80021aa:	edd3 7a00 	vldr	s15, [r3]
 80021ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80021ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80021c4:	4b26      	ldr	r3, [pc, #152]	; (8002260 <TrajectoryEvaluation+0x268>)
 80021c6:	edd3 7a00 	vldr	s15, [r3]
 80021ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80021d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[1]*(t*t*t)/6 + traject -> B[1]*(t*t)/2 + traject -> C[1]*t + traject -> D[1];
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	ed93 7a04 	vldr	s14, [r3, #16]
 80021e8:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <TrajectoryEvaluation+0x268>)
 80021ea:	edd3 6a00 	vldr	s13, [r3]
 80021ee:	4b1c      	ldr	r3, [pc, #112]	; (8002260 <TrajectoryEvaluation+0x268>)
 80021f0:	edd3 7a00 	vldr	s15, [r3]
 80021f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80021f8:	4b19      	ldr	r3, [pc, #100]	; (8002260 <TrajectoryEvaluation+0x268>)
 80021fa:	edd3 7a00 	vldr	s15, [r3]
 80021fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002206:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800220a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8002214:	4b12      	ldr	r3, [pc, #72]	; (8002260 <TrajectoryEvaluation+0x268>)
 8002216:	ed93 6a00 	vldr	s12, [r3]
 800221a:	4b11      	ldr	r3, [pc, #68]	; (8002260 <TrajectoryEvaluation+0x268>)
 800221c:	edd3 7a00 	vldr	s15, [r3]
 8002220:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002224:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002228:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800222c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002230:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 800223a:	4b09      	ldr	r3, [pc, #36]	; (8002260 <TrajectoryEvaluation+0x268>)
 800223c:	edd3 7a00 	vldr	s15, [r3]
 8002240:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002244:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800224e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 8002258:	e2d6      	b.n	8002808 <TrajectoryEvaluation+0x810>
 800225a:	bf00      	nop
 800225c:	f3af 8000 	nop.w
 8002260:	200004a4 	.word	0x200004a4
 8002264:	00000000 	.word	0x00000000
 8002268:	412e8480 	.word	0x412e8480
	}
	else if( t >= traject -> T[1] && t < traject -> T[2])
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 8002272:	4b89      	ldr	r3, [pc, #548]	; (8002498 <TrajectoryEvaluation+0x4a0>)
 8002274:	edd3 7a00 	vldr	s15, [r3]
 8002278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800227c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002280:	d87e      	bhi.n	8002380 <TrajectoryEvaluation+0x388>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8002288:	4b83      	ldr	r3, [pc, #524]	; (8002498 <TrajectoryEvaluation+0x4a0>)
 800228a:	edd3 7a00 	vldr	s15, [r3]
 800228e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002296:	dd73      	ble.n	8002380 <TrajectoryEvaluation+0x388>
	{
		traject -> QJ = traject -> A[2];
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	695a      	ldr	r2, [r3, #20]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[2]*t + traject -> B[2];
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	ed93 7a05 	vldr	s14, [r3, #20]
 80022a8:	4b7b      	ldr	r3, [pc, #492]	; (8002498 <TrajectoryEvaluation+0x4a0>)
 80022aa:	edd3 7a00 	vldr	s15, [r3]
 80022ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80022b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[2]*(t*t)/2 + traject -> B[2]*t + traject -> C[2];
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	ed93 7a05 	vldr	s14, [r3, #20]
 80022c8:	4b73      	ldr	r3, [pc, #460]	; (8002498 <TrajectoryEvaluation+0x4a0>)
 80022ca:	edd3 6a00 	vldr	s13, [r3]
 80022ce:	4b72      	ldr	r3, [pc, #456]	; (8002498 <TrajectoryEvaluation+0x4a0>)
 80022d0:	edd3 7a00 	vldr	s15, [r3]
 80022d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022dc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80022e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80022ea:	4b6b      	ldr	r3, [pc, #428]	; (8002498 <TrajectoryEvaluation+0x4a0>)
 80022ec:	edd3 7a00 	vldr	s15, [r3]
 80022f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80022fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[2]*(t*t*t)/6 + traject -> B[2]*(t*t)/2 + traject -> C[2]*t + traject -> D[2];
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	ed93 7a05 	vldr	s14, [r3, #20]
 800230e:	4b62      	ldr	r3, [pc, #392]	; (8002498 <TrajectoryEvaluation+0x4a0>)
 8002310:	edd3 6a00 	vldr	s13, [r3]
 8002314:	4b60      	ldr	r3, [pc, #384]	; (8002498 <TrajectoryEvaluation+0x4a0>)
 8002316:	edd3 7a00 	vldr	s15, [r3]
 800231a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800231e:	4b5e      	ldr	r3, [pc, #376]	; (8002498 <TrajectoryEvaluation+0x4a0>)
 8002320:	edd3 7a00 	vldr	s15, [r3]
 8002324:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232c:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002330:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800233a:	4b57      	ldr	r3, [pc, #348]	; (8002498 <TrajectoryEvaluation+0x4a0>)
 800233c:	ed93 6a00 	vldr	s12, [r3]
 8002340:	4b55      	ldr	r3, [pc, #340]	; (8002498 <TrajectoryEvaluation+0x4a0>)
 8002342:	edd3 7a00 	vldr	s15, [r3]
 8002346:	ee66 7a27 	vmul.f32	s15, s12, s15
 800234a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800234e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002352:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002356:	ee37 7a27 	vadd.f32	s14, s14, s15
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8002360:	4b4d      	ldr	r3, [pc, #308]	; (8002498 <TrajectoryEvaluation+0x4a0>)
 8002362:	edd3 7a00 	vldr	s15, [r3]
 8002366:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800236a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8002374:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 800237e:	e243      	b.n	8002808 <TrajectoryEvaluation+0x810>
	}
	else if( t >= traject -> T[2] && t < traject -> T[3])
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8002386:	4b44      	ldr	r3, [pc, #272]	; (8002498 <TrajectoryEvaluation+0x4a0>)
 8002388:	edd3 7a00 	vldr	s15, [r3]
 800238c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002394:	f200 8082 	bhi.w	800249c <TrajectoryEvaluation+0x4a4>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800239e:	4b3e      	ldr	r3, [pc, #248]	; (8002498 <TrajectoryEvaluation+0x4a0>)
 80023a0:	edd3 7a00 	vldr	s15, [r3]
 80023a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ac:	dd76      	ble.n	800249c <TrajectoryEvaluation+0x4a4>
	{
		traject -> QJ = traject -> A[3];
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[3]*t + traject -> B[3];
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	ed93 7a06 	vldr	s14, [r3, #24]
 80023be:	4b36      	ldr	r3, [pc, #216]	; (8002498 <TrajectoryEvaluation+0x4a0>)
 80023c0:	edd3 7a00 	vldr	s15, [r3]
 80023c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80023ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[3]*(t*t)/2 + traject -> B[3]*t + traject -> C[3];
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	ed93 7a06 	vldr	s14, [r3, #24]
 80023de:	4b2e      	ldr	r3, [pc, #184]	; (8002498 <TrajectoryEvaluation+0x4a0>)
 80023e0:	edd3 6a00 	vldr	s13, [r3]
 80023e4:	4b2c      	ldr	r3, [pc, #176]	; (8002498 <TrajectoryEvaluation+0x4a0>)
 80023e6:	edd3 7a00 	vldr	s15, [r3]
 80023ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80023f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8002400:	4b25      	ldr	r3, [pc, #148]	; (8002498 <TrajectoryEvaluation+0x4a0>)
 8002402:	edd3 7a00 	vldr	s15, [r3]
 8002406:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800240a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[3]*(t*t*t)/6 + traject -> B[3]*(t*t)/2 + traject -> C[3]*t + traject -> D[3];
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	ed93 7a06 	vldr	s14, [r3, #24]
 8002424:	4b1c      	ldr	r3, [pc, #112]	; (8002498 <TrajectoryEvaluation+0x4a0>)
 8002426:	edd3 6a00 	vldr	s13, [r3]
 800242a:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <TrajectoryEvaluation+0x4a0>)
 800242c:	edd3 7a00 	vldr	s15, [r3]
 8002430:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002434:	4b18      	ldr	r3, [pc, #96]	; (8002498 <TrajectoryEvaluation+0x4a0>)
 8002436:	edd3 7a00 	vldr	s15, [r3]
 800243a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800243e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002442:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002446:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8002450:	4b11      	ldr	r3, [pc, #68]	; (8002498 <TrajectoryEvaluation+0x4a0>)
 8002452:	ed93 6a00 	vldr	s12, [r3]
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <TrajectoryEvaluation+0x4a0>)
 8002458:	edd3 7a00 	vldr	s15, [r3]
 800245c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002460:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002464:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002468:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800246c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8002476:	4b08      	ldr	r3, [pc, #32]	; (8002498 <TrajectoryEvaluation+0x4a0>)
 8002478:	edd3 7a00 	vldr	s15, [r3]
 800247c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002480:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800248a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 8002494:	e1b8      	b.n	8002808 <TrajectoryEvaluation+0x810>
 8002496:	bf00      	nop
 8002498:	200004a4 	.word	0x200004a4
	}
	else if( t >= traject -> T[3] && t < traject -> T[4])
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 80024a2:	4b89      	ldr	r3, [pc, #548]	; (80026c8 <TrajectoryEvaluation+0x6d0>)
 80024a4:	edd3 7a00 	vldr	s15, [r3]
 80024a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b0:	d87e      	bhi.n	80025b0 <TrajectoryEvaluation+0x5b8>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 80024b8:	4b83      	ldr	r3, [pc, #524]	; (80026c8 <TrajectoryEvaluation+0x6d0>)
 80024ba:	edd3 7a00 	vldr	s15, [r3]
 80024be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c6:	dd73      	ble.n	80025b0 <TrajectoryEvaluation+0x5b8>
	{
		traject -> QJ = traject -> A[4];
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	69da      	ldr	r2, [r3, #28]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[4]*t + traject -> B[4];
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	ed93 7a07 	vldr	s14, [r3, #28]
 80024d8:	4b7b      	ldr	r3, [pc, #492]	; (80026c8 <TrajectoryEvaluation+0x6d0>)
 80024da:	edd3 7a00 	vldr	s15, [r3]
 80024de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80024e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[4]*(t*t)/2 + traject -> B[4]*t + traject -> C[4];
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	ed93 7a07 	vldr	s14, [r3, #28]
 80024f8:	4b73      	ldr	r3, [pc, #460]	; (80026c8 <TrajectoryEvaluation+0x6d0>)
 80024fa:	edd3 6a00 	vldr	s13, [r3]
 80024fe:	4b72      	ldr	r3, [pc, #456]	; (80026c8 <TrajectoryEvaluation+0x6d0>)
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002510:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800251a:	4b6b      	ldr	r3, [pc, #428]	; (80026c8 <TrajectoryEvaluation+0x6d0>)
 800251c:	edd3 7a00 	vldr	s15, [r3]
 8002520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002524:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800252e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[4]*(t*t*t)/6 + traject -> B[4]*(t*t)/2 + traject -> C[4]*t + traject -> D[4];
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	ed93 7a07 	vldr	s14, [r3, #28]
 800253e:	4b62      	ldr	r3, [pc, #392]	; (80026c8 <TrajectoryEvaluation+0x6d0>)
 8002540:	edd3 6a00 	vldr	s13, [r3]
 8002544:	4b60      	ldr	r3, [pc, #384]	; (80026c8 <TrajectoryEvaluation+0x6d0>)
 8002546:	edd3 7a00 	vldr	s15, [r3]
 800254a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800254e:	4b5e      	ldr	r3, [pc, #376]	; (80026c8 <TrajectoryEvaluation+0x6d0>)
 8002550:	edd3 7a00 	vldr	s15, [r3]
 8002554:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255c:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002560:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800256a:	4b57      	ldr	r3, [pc, #348]	; (80026c8 <TrajectoryEvaluation+0x6d0>)
 800256c:	ed93 6a00 	vldr	s12, [r3]
 8002570:	4b55      	ldr	r3, [pc, #340]	; (80026c8 <TrajectoryEvaluation+0x6d0>)
 8002572:	edd3 7a00 	vldr	s15, [r3]
 8002576:	ee66 7a27 	vmul.f32	s15, s12, s15
 800257a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800257e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002582:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002586:	ee37 7a27 	vadd.f32	s14, s14, s15
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002590:	4b4d      	ldr	r3, [pc, #308]	; (80026c8 <TrajectoryEvaluation+0x6d0>)
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800259a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80025a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 80025ae:	e12b      	b.n	8002808 <TrajectoryEvaluation+0x810>
	}
	else if( t >= traject -> T[4] && t < traject -> T[5])
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 80025b6:	4b44      	ldr	r3, [pc, #272]	; (80026c8 <TrajectoryEvaluation+0x6d0>)
 80025b8:	edd3 7a00 	vldr	s15, [r3]
 80025bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c4:	f200 8082 	bhi.w	80026cc <TrajectoryEvaluation+0x6d4>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80025ce:	4b3e      	ldr	r3, [pc, #248]	; (80026c8 <TrajectoryEvaluation+0x6d0>)
 80025d0:	edd3 7a00 	vldr	s15, [r3]
 80025d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025dc:	dd76      	ble.n	80026cc <TrajectoryEvaluation+0x6d4>
	{
		traject -> QJ = traject -> A[5];
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a1a      	ldr	r2, [r3, #32]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[5]*t + traject -> B[5];
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	ed93 7a08 	vldr	s14, [r3, #32]
 80025ee:	4b36      	ldr	r3, [pc, #216]	; (80026c8 <TrajectoryEvaluation+0x6d0>)
 80025f0:	edd3 7a00 	vldr	s15, [r3]
 80025f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80025fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[5]*(t*t)/2 + traject -> B[5]*t + traject -> C[5];
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	ed93 7a08 	vldr	s14, [r3, #32]
 800260e:	4b2e      	ldr	r3, [pc, #184]	; (80026c8 <TrajectoryEvaluation+0x6d0>)
 8002610:	edd3 6a00 	vldr	s13, [r3]
 8002614:	4b2c      	ldr	r3, [pc, #176]	; (80026c8 <TrajectoryEvaluation+0x6d0>)
 8002616:	edd3 7a00 	vldr	s15, [r3]
 800261a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800261e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002622:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002626:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002630:	4b25      	ldr	r3, [pc, #148]	; (80026c8 <TrajectoryEvaluation+0x6d0>)
 8002632:	edd3 7a00 	vldr	s15, [r3]
 8002636:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800263a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002644:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[5]*(t*t*t)/6 + traject -> B[5]*(t*t)/2 + traject -> C[5]*t + traject -> D[5];
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	ed93 7a08 	vldr	s14, [r3, #32]
 8002654:	4b1c      	ldr	r3, [pc, #112]	; (80026c8 <TrajectoryEvaluation+0x6d0>)
 8002656:	edd3 6a00 	vldr	s13, [r3]
 800265a:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <TrajectoryEvaluation+0x6d0>)
 800265c:	edd3 7a00 	vldr	s15, [r3]
 8002660:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002664:	4b18      	ldr	r3, [pc, #96]	; (80026c8 <TrajectoryEvaluation+0x6d0>)
 8002666:	edd3 7a00 	vldr	s15, [r3]
 800266a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800266e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002672:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002676:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 8002680:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <TrajectoryEvaluation+0x6d0>)
 8002682:	ed93 6a00 	vldr	s12, [r3]
 8002686:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <TrajectoryEvaluation+0x6d0>)
 8002688:	edd3 7a00 	vldr	s15, [r3]
 800268c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002690:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002694:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002698:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800269c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 80026a6:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <TrajectoryEvaluation+0x6d0>)
 80026a8:	edd3 7a00 	vldr	s15, [r3]
 80026ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80026ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 80026c4:	e0a0      	b.n	8002808 <TrajectoryEvaluation+0x810>
 80026c6:	bf00      	nop
 80026c8:	200004a4 	.word	0x200004a4
	}
	else if( t >= traject -> T[5] && t < traject -> T[6])
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80026d2:	4b52      	ldr	r3, [pc, #328]	; (800281c <TrajectoryEvaluation+0x824>)
 80026d4:	edd3 7a00 	vldr	s15, [r3]
 80026d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e0:	d87e      	bhi.n	80027e0 <TrajectoryEvaluation+0x7e8>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80026e8:	4b4c      	ldr	r3, [pc, #304]	; (800281c <TrajectoryEvaluation+0x824>)
 80026ea:	edd3 7a00 	vldr	s15, [r3]
 80026ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f6:	dd73      	ble.n	80027e0 <TrajectoryEvaluation+0x7e8>
	{
		traject -> QJ = traject -> A[6];
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = traject -> A[6]*t + traject -> B[6];
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002708:	4b44      	ldr	r3, [pc, #272]	; (800281c <TrajectoryEvaluation+0x824>)
 800270a:	edd3 7a00 	vldr	s15, [r3]
 800270e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002718:	ee77 7a27 	vadd.f32	s15, s14, s15
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
		traject -> QV = traject -> A[6]*(t*t)/2 + traject -> B[6]*t + traject -> C[6];
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002728:	4b3c      	ldr	r3, [pc, #240]	; (800281c <TrajectoryEvaluation+0x824>)
 800272a:	edd3 6a00 	vldr	s13, [r3]
 800272e:	4b3b      	ldr	r3, [pc, #236]	; (800281c <TrajectoryEvaluation+0x824>)
 8002730:	edd3 7a00 	vldr	s15, [r3]
 8002734:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800273c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002740:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800274a:	4b34      	ldr	r3, [pc, #208]	; (800281c <TrajectoryEvaluation+0x824>)
 800274c:	edd3 7a00 	vldr	s15, [r3]
 8002750:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002754:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800275e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
		traject -> QX = traject -> A[6]*(t*t*t)/6 + traject -> B[6]*(t*t)/2 + traject -> C[6]*t + traject -> D[6];
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800276e:	4b2b      	ldr	r3, [pc, #172]	; (800281c <TrajectoryEvaluation+0x824>)
 8002770:	edd3 6a00 	vldr	s13, [r3]
 8002774:	4b29      	ldr	r3, [pc, #164]	; (800281c <TrajectoryEvaluation+0x824>)
 8002776:	edd3 7a00 	vldr	s15, [r3]
 800277a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800277e:	4b27      	ldr	r3, [pc, #156]	; (800281c <TrajectoryEvaluation+0x824>)
 8002780:	edd3 7a00 	vldr	s15, [r3]
 8002784:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002788:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278c:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002790:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800279a:	4b20      	ldr	r3, [pc, #128]	; (800281c <TrajectoryEvaluation+0x824>)
 800279c:	ed93 6a00 	vldr	s12, [r3]
 80027a0:	4b1e      	ldr	r3, [pc, #120]	; (800281c <TrajectoryEvaluation+0x824>)
 80027a2:	edd3 7a00 	vldr	s15, [r3]
 80027a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80027aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80027ae:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80027b2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80027b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 80027c0:	4b16      	ldr	r3, [pc, #88]	; (800281c <TrajectoryEvaluation+0x824>)
 80027c2:	edd3 7a00 	vldr	s15, [r3]
 80027c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 80027d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
 80027de:	e013      	b.n	8002808 <TrajectoryEvaluation+0x810>
	}
	else
	{
		traject -> QJ = 0;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		traject -> QA = 0;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		traject -> QV = 0;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f04f 0200 	mov.w	r2, #0
 80027fa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		traject -> QX = 0;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	}

	return traject -> QV;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800280e:	ee07 3a90 	vmov	s15, r3
}
 8002812:	eeb0 0a67 	vmov.f32	s0, s15
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bdb0      	pop	{r4, r5, r7, pc}
 800281c:	200004a4 	.word	0x200004a4

08002820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002820:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002824:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002826:	f000 fe7f 	bl	8003528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800282a:	f000 f87f 	bl	800292c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800282e:	f000 faa7 	bl	8002d80 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002832:	f000 fa7b 	bl	8002d2c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002836:	f000 f8e1 	bl	80029fc <MX_TIM1_Init>
  MX_TIM2_Init();
 800283a:	f000 f963 	bl	8002b04 <MX_TIM2_Init>
  MX_TIM3_Init();
 800283e:	f000 f9b5 	bl	8002bac <MX_TIM3_Init>
  MX_TIM11_Init();
 8002842:	f000 fa4f 	bl	8002ce4 <MX_TIM11_Init>
  MX_TIM4_Init();
 8002846:	f000 f9ff 	bl	8002c48 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  KalmanMatrixInit(&KalmanVar);
 800284a:	4829      	ldr	r0, [pc, #164]	; (80028f0 <main+0xd0>)
 800284c:	f7fe fa64 	bl	8000d18 <KalmanMatrixInit>
  //////////////////////////
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002850:	2100      	movs	r1, #0
 8002852:	4828      	ldr	r0, [pc, #160]	; (80028f4 <main+0xd4>)
 8002854:	f001 ff24 	bl	80046a0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT (&htim11);
 8002858:	4827      	ldr	r0, [pc, #156]	; (80028f8 <main+0xd8>)
 800285a:	f001 fe6f 	bl	800453c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim3);
 800285e:	4827      	ldr	r0, [pc, #156]	; (80028fc <main+0xdc>)
 8002860:	f001 fe6c 	bl	800453c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002864:	213c      	movs	r1, #60	; 0x3c
 8002866:	4826      	ldr	r0, [pc, #152]	; (8002900 <main+0xe0>)
 8002868:	f002 f870 	bl	800494c <HAL_TIM_Encoder_Start>
  EncoderRawData[0]=TIM2->CNT;
 800286c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	461a      	mov	r2, r3
 8002874:	4b23      	ldr	r3, [pc, #140]	; (8002904 <main+0xe4>)
 8002876:	601a      	str	r2, [r3, #0]
  EncoderRawData[1]=EncoderRawData[0];
 8002878:	4b22      	ldr	r3, [pc, #136]	; (8002904 <main+0xe4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a21      	ldr	r2, [pc, #132]	; (8002904 <main+0xe4>)
 800287e:	6053      	str	r3, [r2, #4]
  PositionRaw=EncoderRawData[0];
 8002880:	4b20      	ldr	r3, [pc, #128]	; (8002904 <main+0xe4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a20      	ldr	r2, [pc, #128]	; (8002908 <main+0xe8>)
 8002886:	6013      	str	r3, [r2, #0]
  PIDController_Init(&pid);
 8002888:	4820      	ldr	r0, [pc, #128]	; (800290c <main+0xec>)
 800288a:	f7fe fccc 	bl	8001226 <PIDController_Init>
  PIDVelocityController_Init(&PidVelo);
 800288e:	4820      	ldr	r0, [pc, #128]	; (8002910 <main+0xf0>)
 8002890:	f7fe fdab 	bl	80013ea <PIDVelocityController_Init>

  CoefficientAndTimeCalculation(&traject,0.0,360.0);
 8002894:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8002914 <main+0xf4>
 8002898:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8002918 <main+0xf8>
 800289c:	481f      	ldr	r0, [pc, #124]	; (800291c <main+0xfc>)
 800289e:	f7fe fe57 	bl	8001550 <CoefficientAndTimeCalculation>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  Drivemotor(PidVelo.ControllerOut);
	  Drivemotor(pid.out);
 80028a2:	4b1a      	ldr	r3, [pc, #104]	; (800290c <main+0xec>)
 80028a4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80028a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028ac:	ee17 0a90 	vmov	r0, s15
 80028b0:	f000 fb76 	bl	8002fa0 <Drivemotor>
	  static int timeStamp2 = 0;
	  if (Micros() - timeStamp2 > 2000000)
 80028b4:	f000 fc3e 	bl	8003134 <Micros>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4918      	ldr	r1, [pc, #96]	; (8002920 <main+0x100>)
 80028be:	6809      	ldr	r1, [r1, #0]
 80028c0:	17c8      	asrs	r0, r1, #31
 80028c2:	4688      	mov	r8, r1
 80028c4:	4681      	mov	r9, r0
 80028c6:	ebb2 0408 	subs.w	r4, r2, r8
 80028ca:	eb63 0509 	sbc.w	r5, r3, r9
 80028ce:	4b15      	ldr	r3, [pc, #84]	; (8002924 <main+0x104>)
 80028d0:	429c      	cmp	r4, r3
 80028d2:	f175 0300 	sbcs.w	r3, r5, #0
 80028d6:	d3e4      	bcc.n	80028a2 <main+0x82>
	  {
			timeStamp2 = Micros();
 80028d8:	f000 fc2c 	bl	8003134 <Micros>
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <main+0x100>)
 80028e2:	601a      	str	r2, [r3, #0]
			PWMC = -1*PWMC;
 80028e4:	4b10      	ldr	r3, [pc, #64]	; (8002928 <main+0x108>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	425b      	negs	r3, r3
 80028ea:	4a0f      	ldr	r2, [pc, #60]	; (8002928 <main+0x108>)
 80028ec:	6013      	str	r3, [r2, #0]
  {
 80028ee:	e7d8      	b.n	80028a2 <main+0x82>
 80028f0:	20000000 	.word	0x20000000
 80028f4:	200004a8 	.word	0x200004a8
 80028f8:	200005c8 	.word	0x200005c8
 80028fc:	20000538 	.word	0x20000538
 8002900:	200004f0 	.word	0x200004f0
 8002904:	20000660 	.word	0x20000660
 8002908:	2000066c 	.word	0x2000066c
 800290c:	20000354 	.word	0x20000354
 8002910:	2000038c 	.word	0x2000038c
 8002914:	43b40000 	.word	0x43b40000
 8002918:	00000000 	.word	0x00000000
 800291c:	200003c8 	.word	0x200003c8
 8002920:	20000690 	.word	0x20000690
 8002924:	001e8481 	.word	0x001e8481
 8002928:	200003c4 	.word	0x200003c4

0800292c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b094      	sub	sp, #80	; 0x50
 8002930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002932:	f107 0320 	add.w	r3, r7, #32
 8002936:	2230      	movs	r2, #48	; 0x30
 8002938:	2100      	movs	r1, #0
 800293a:	4618      	mov	r0, r3
 800293c:	f003 fcae 	bl	800629c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002940:	f107 030c 	add.w	r3, r7, #12
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002950:	2300      	movs	r3, #0
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	4b27      	ldr	r3, [pc, #156]	; (80029f4 <SystemClock_Config+0xc8>)
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	4a26      	ldr	r2, [pc, #152]	; (80029f4 <SystemClock_Config+0xc8>)
 800295a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295e:	6413      	str	r3, [r2, #64]	; 0x40
 8002960:	4b24      	ldr	r3, [pc, #144]	; (80029f4 <SystemClock_Config+0xc8>)
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800296c:	2300      	movs	r3, #0
 800296e:	607b      	str	r3, [r7, #4]
 8002970:	4b21      	ldr	r3, [pc, #132]	; (80029f8 <SystemClock_Config+0xcc>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a20      	ldr	r2, [pc, #128]	; (80029f8 <SystemClock_Config+0xcc>)
 8002976:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	4b1e      	ldr	r3, [pc, #120]	; (80029f8 <SystemClock_Config+0xcc>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002984:	607b      	str	r3, [r7, #4]
 8002986:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002988:	2302      	movs	r3, #2
 800298a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800298c:	2301      	movs	r3, #1
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002990:	2310      	movs	r3, #16
 8002992:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002994:	2302      	movs	r3, #2
 8002996:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002998:	2300      	movs	r3, #0
 800299a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800299c:	2308      	movs	r3, #8
 800299e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80029a0:	2364      	movs	r3, #100	; 0x64
 80029a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029a4:	2302      	movs	r3, #2
 80029a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80029a8:	2304      	movs	r3, #4
 80029aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029ac:	f107 0320 	add.w	r3, r7, #32
 80029b0:	4618      	mov	r0, r3
 80029b2:	f001 f8db 	bl	8003b6c <HAL_RCC_OscConfig>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80029bc:	f000 fbd2 	bl	8003164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029c0:	230f      	movs	r3, #15
 80029c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029c4:	2302      	movs	r3, #2
 80029c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80029d6:	f107 030c 	add.w	r3, r7, #12
 80029da:	2103      	movs	r1, #3
 80029dc:	4618      	mov	r0, r3
 80029de:	f001 fb3d 	bl	800405c <HAL_RCC_ClockConfig>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80029e8:	f000 fbbc 	bl	8003164 <Error_Handler>
  }
}
 80029ec:	bf00      	nop
 80029ee:	3750      	adds	r7, #80	; 0x50
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40007000 	.word	0x40007000

080029fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b092      	sub	sp, #72	; 0x48
 8002a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
 8002a1c:	615a      	str	r2, [r3, #20]
 8002a1e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a20:	1d3b      	adds	r3, r7, #4
 8002a22:	2220      	movs	r2, #32
 8002a24:	2100      	movs	r1, #0
 8002a26:	4618      	mov	r0, r3
 8002a28:	f003 fc38 	bl	800629c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a2c:	4b33      	ldr	r3, [pc, #204]	; (8002afc <MX_TIM1_Init+0x100>)
 8002a2e:	4a34      	ldr	r2, [pc, #208]	; (8002b00 <MX_TIM1_Init+0x104>)
 8002a30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8002a32:	4b32      	ldr	r3, [pc, #200]	; (8002afc <MX_TIM1_Init+0x100>)
 8002a34:	2209      	movs	r2, #9
 8002a36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a38:	4b30      	ldr	r3, [pc, #192]	; (8002afc <MX_TIM1_Init+0x100>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8002a3e:	4b2f      	ldr	r3, [pc, #188]	; (8002afc <MX_TIM1_Init+0x100>)
 8002a40:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a46:	4b2d      	ldr	r3, [pc, #180]	; (8002afc <MX_TIM1_Init+0x100>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a4c:	4b2b      	ldr	r3, [pc, #172]	; (8002afc <MX_TIM1_Init+0x100>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a52:	4b2a      	ldr	r3, [pc, #168]	; (8002afc <MX_TIM1_Init+0x100>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a58:	4828      	ldr	r0, [pc, #160]	; (8002afc <MX_TIM1_Init+0x100>)
 8002a5a:	f001 fdd1 	bl	8004600 <HAL_TIM_PWM_Init>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002a64:	f000 fb7e 	bl	8003164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a74:	4619      	mov	r1, r3
 8002a76:	4821      	ldr	r0, [pc, #132]	; (8002afc <MX_TIM1_Init+0x100>)
 8002a78:	f002 fd7c 	bl	8005574 <HAL_TIMEx_MasterConfigSynchronization>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002a82:	f000 fb6f 	bl	8003164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a86:	2360      	movs	r3, #96	; 0x60
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a92:	2300      	movs	r3, #0
 8002a94:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a96:	2300      	movs	r3, #0
 8002a98:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4814      	ldr	r0, [pc, #80]	; (8002afc <MX_TIM1_Init+0x100>)
 8002aac:	f002 f8e4 	bl	8004c78 <HAL_TIM_PWM_ConfigChannel>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002ab6:	f000 fb55 	bl	8003164 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002aba:	2300      	movs	r3, #0
 8002abc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ace:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ad2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ad8:	1d3b      	adds	r3, r7, #4
 8002ada:	4619      	mov	r1, r3
 8002adc:	4807      	ldr	r0, [pc, #28]	; (8002afc <MX_TIM1_Init+0x100>)
 8002ade:	f002 fdb7 	bl	8005650 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002ae8:	f000 fb3c 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002aec:	4803      	ldr	r0, [pc, #12]	; (8002afc <MX_TIM1_Init+0x100>)
 8002aee:	f000 fc1b 	bl	8003328 <HAL_TIM_MspPostInit>

}
 8002af2:	bf00      	nop
 8002af4:	3748      	adds	r7, #72	; 0x48
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	200004a8 	.word	0x200004a8
 8002b00:	40010000 	.word	0x40010000

08002b04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08c      	sub	sp, #48	; 0x30
 8002b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b0a:	f107 030c 	add.w	r3, r7, #12
 8002b0e:	2224      	movs	r2, #36	; 0x24
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f003 fbc2 	bl	800629c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b18:	1d3b      	adds	r3, r7, #4
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b20:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <MX_TIM2_Init+0xa4>)
 8002b22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002b28:	4b1f      	ldr	r3, [pc, #124]	; (8002ba8 <MX_TIM2_Init+0xa4>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ba8 <MX_TIM2_Init+0xa4>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 11999;
 8002b34:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <MX_TIM2_Init+0xa4>)
 8002b36:	f642 62df 	movw	r2, #11999	; 0x2edf
 8002b3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <MX_TIM2_Init+0xa4>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b42:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <MX_TIM2_Init+0xa4>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b50:	2301      	movs	r3, #1
 8002b52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b60:	2301      	movs	r3, #1
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b64:	2300      	movs	r3, #0
 8002b66:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002b6c:	f107 030c 	add.w	r3, r7, #12
 8002b70:	4619      	mov	r1, r3
 8002b72:	480d      	ldr	r0, [pc, #52]	; (8002ba8 <MX_TIM2_Init+0xa4>)
 8002b74:	f001 fe44 	bl	8004800 <HAL_TIM_Encoder_Init>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002b7e:	f000 faf1 	bl	8003164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b82:	2300      	movs	r3, #0
 8002b84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b8a:	1d3b      	adds	r3, r7, #4
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4806      	ldr	r0, [pc, #24]	; (8002ba8 <MX_TIM2_Init+0xa4>)
 8002b90:	f002 fcf0 	bl	8005574 <HAL_TIMEx_MasterConfigSynchronization>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002b9a:	f000 fae3 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b9e:	bf00      	nop
 8002ba0:	3730      	adds	r7, #48	; 0x30
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	200004f0 	.word	0x200004f0

08002bac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bb2:	f107 0308 	add.w	r3, r7, #8
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	609a      	str	r2, [r3, #8]
 8002bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bc0:	463b      	mov	r3, r7
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bc8:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <MX_TIM3_Init+0x94>)
 8002bca:	4a1e      	ldr	r2, [pc, #120]	; (8002c44 <MX_TIM3_Init+0x98>)
 8002bcc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8002bce:	4b1c      	ldr	r3, [pc, #112]	; (8002c40 <MX_TIM3_Init+0x94>)
 8002bd0:	2209      	movs	r2, #9
 8002bd2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bd4:	4b1a      	ldr	r3, [pc, #104]	; (8002c40 <MX_TIM3_Init+0x94>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8002bda:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <MX_TIM3_Init+0x94>)
 8002bdc:	f242 720f 	movw	r2, #9999	; 0x270f
 8002be0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002be2:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <MX_TIM3_Init+0x94>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002be8:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <MX_TIM3_Init+0x94>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002bee:	4814      	ldr	r0, [pc, #80]	; (8002c40 <MX_TIM3_Init+0x94>)
 8002bf0:	f001 fc54 	bl	800449c <HAL_TIM_Base_Init>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002bfa:	f000 fab3 	bl	8003164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c04:	f107 0308 	add.w	r3, r7, #8
 8002c08:	4619      	mov	r1, r3
 8002c0a:	480d      	ldr	r0, [pc, #52]	; (8002c40 <MX_TIM3_Init+0x94>)
 8002c0c:	f002 f8f6 	bl	8004dfc <HAL_TIM_ConfigClockSource>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002c16:	f000 faa5 	bl	8003164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c22:	463b      	mov	r3, r7
 8002c24:	4619      	mov	r1, r3
 8002c26:	4806      	ldr	r0, [pc, #24]	; (8002c40 <MX_TIM3_Init+0x94>)
 8002c28:	f002 fca4 	bl	8005574 <HAL_TIMEx_MasterConfigSynchronization>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002c32:	f000 fa97 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c36:	bf00      	nop
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000538 	.word	0x20000538
 8002c44:	40000400 	.word	0x40000400

08002c48 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c4e:	f107 0308 	add.w	r3, r7, #8
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	609a      	str	r2, [r3, #8]
 8002c5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c5c:	463b      	mov	r3, r7
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c64:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <MX_TIM4_Init+0x94>)
 8002c66:	4a1e      	ldr	r2, [pc, #120]	; (8002ce0 <MX_TIM4_Init+0x98>)
 8002c68:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9;
 8002c6a:	4b1c      	ldr	r3, [pc, #112]	; (8002cdc <MX_TIM4_Init+0x94>)
 8002c6c:	2209      	movs	r2, #9
 8002c6e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c70:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <MX_TIM4_Init+0x94>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002c76:	4b19      	ldr	r3, [pc, #100]	; (8002cdc <MX_TIM4_Init+0x94>)
 8002c78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c7c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c7e:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <MX_TIM4_Init+0x94>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c84:	4b15      	ldr	r3, [pc, #84]	; (8002cdc <MX_TIM4_Init+0x94>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c8a:	4814      	ldr	r0, [pc, #80]	; (8002cdc <MX_TIM4_Init+0x94>)
 8002c8c:	f001 fc06 	bl	800449c <HAL_TIM_Base_Init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002c96:	f000 fa65 	bl	8003164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002ca0:	f107 0308 	add.w	r3, r7, #8
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	480d      	ldr	r0, [pc, #52]	; (8002cdc <MX_TIM4_Init+0x94>)
 8002ca8:	f002 f8a8 	bl	8004dfc <HAL_TIM_ConfigClockSource>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002cb2:	f000 fa57 	bl	8003164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002cbe:	463b      	mov	r3, r7
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4806      	ldr	r0, [pc, #24]	; (8002cdc <MX_TIM4_Init+0x94>)
 8002cc4:	f002 fc56 	bl	8005574 <HAL_TIMEx_MasterConfigSynchronization>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002cce:	f000 fa49 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002cd2:	bf00      	nop
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000580 	.word	0x20000580
 8002ce0:	40000800 	.word	0x40000800

08002ce4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002ce8:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <MX_TIM11_Init+0x40>)
 8002cea:	4a0f      	ldr	r2, [pc, #60]	; (8002d28 <MX_TIM11_Init+0x44>)
 8002cec:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8002cee:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <MX_TIM11_Init+0x40>)
 8002cf0:	2263      	movs	r2, #99	; 0x63
 8002cf2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <MX_TIM11_Init+0x40>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <MX_TIM11_Init+0x40>)
 8002cfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d00:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d02:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <MX_TIM11_Init+0x40>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <MX_TIM11_Init+0x40>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002d0e:	4805      	ldr	r0, [pc, #20]	; (8002d24 <MX_TIM11_Init+0x40>)
 8002d10:	f001 fbc4 	bl	800449c <HAL_TIM_Base_Init>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8002d1a:	f000 fa23 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	200005c8 	.word	0x200005c8
 8002d28:	40014800 	.word	0x40014800

08002d2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <MX_USART2_UART_Init+0x4c>)
 8002d32:	4a12      	ldr	r2, [pc, #72]	; (8002d7c <MX_USART2_UART_Init+0x50>)
 8002d34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <MX_USART2_UART_Init+0x4c>)
 8002d38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <MX_USART2_UART_Init+0x4c>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d44:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <MX_USART2_UART_Init+0x4c>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <MX_USART2_UART_Init+0x4c>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d50:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <MX_USART2_UART_Init+0x4c>)
 8002d52:	220c      	movs	r2, #12
 8002d54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d56:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <MX_USART2_UART_Init+0x4c>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <MX_USART2_UART_Init+0x4c>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d62:	4805      	ldr	r0, [pc, #20]	; (8002d78 <MX_USART2_UART_Init+0x4c>)
 8002d64:	f002 fcda 	bl	800571c <HAL_UART_Init>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d6e:	f000 f9f9 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000610 	.word	0x20000610
 8002d7c:	40004400 	.word	0x40004400

08002d80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	; 0x28
 8002d84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d86:	f107 0314 	add.w	r3, r7, #20
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
 8002d90:	609a      	str	r2, [r3, #8]
 8002d92:	60da      	str	r2, [r3, #12]
 8002d94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	4b2e      	ldr	r3, [pc, #184]	; (8002e54 <MX_GPIO_Init+0xd4>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	4a2d      	ldr	r2, [pc, #180]	; (8002e54 <MX_GPIO_Init+0xd4>)
 8002da0:	f043 0304 	orr.w	r3, r3, #4
 8002da4:	6313      	str	r3, [r2, #48]	; 0x30
 8002da6:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <MX_GPIO_Init+0xd4>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	4b27      	ldr	r3, [pc, #156]	; (8002e54 <MX_GPIO_Init+0xd4>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	4a26      	ldr	r2, [pc, #152]	; (8002e54 <MX_GPIO_Init+0xd4>)
 8002dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc2:	4b24      	ldr	r3, [pc, #144]	; (8002e54 <MX_GPIO_Init+0xd4>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60bb      	str	r3, [r7, #8]
 8002dd2:	4b20      	ldr	r3, [pc, #128]	; (8002e54 <MX_GPIO_Init+0xd4>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	4a1f      	ldr	r2, [pc, #124]	; (8002e54 <MX_GPIO_Init+0xd4>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dde:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <MX_GPIO_Init+0xd4>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	607b      	str	r3, [r7, #4]
 8002dee:	4b19      	ldr	r3, [pc, #100]	; (8002e54 <MX_GPIO_Init+0xd4>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	4a18      	ldr	r2, [pc, #96]	; (8002e54 <MX_GPIO_Init+0xd4>)
 8002df4:	f043 0302 	orr.w	r3, r3, #2
 8002df8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfa:	4b16      	ldr	r3, [pc, #88]	; (8002e54 <MX_GPIO_Init+0xd4>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	607b      	str	r3, [r7, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|PIN_DIR_Pin, GPIO_PIN_RESET);
 8002e06:	2200      	movs	r2, #0
 8002e08:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002e0c:	4812      	ldr	r0, [pc, #72]	; (8002e58 <MX_GPIO_Init+0xd8>)
 8002e0e:	f000 fe93 	bl	8003b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e18:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e22:	f107 0314 	add.w	r3, r7, #20
 8002e26:	4619      	mov	r1, r3
 8002e28:	480c      	ldr	r0, [pc, #48]	; (8002e5c <MX_GPIO_Init+0xdc>)
 8002e2a:	f000 fd01 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PIN_DIR_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|PIN_DIR_Pin;
 8002e2e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e34:	2301      	movs	r3, #1
 8002e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e40:	f107 0314 	add.w	r3, r7, #20
 8002e44:	4619      	mov	r1, r3
 8002e46:	4804      	ldr	r0, [pc, #16]	; (8002e58 <MX_GPIO_Init+0xd8>)
 8002e48:	f000 fcf2 	bl	8003830 <HAL_GPIO_Init>

}
 8002e4c:	bf00      	nop
 8002e4e:	3728      	adds	r7, #40	; 0x28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40023800 	.word	0x40023800
 8002e58:	40020000 	.word	0x40020000
 8002e5c:	40020800 	.word	0x40020800

08002e60 <EncoderRead>:

/* USER CODE BEGIN 4 */
void EncoderRead()
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
	static int32_t SignalThreshold = 0.6*12000;
	EncoderRawData[0] = TIM2->CNT;
 8002e64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4b3c      	ldr	r3, [pc, #240]	; (8002f60 <EncoderRead+0x100>)
 8002e6e:	601a      	str	r2, [r3, #0]
	if(EncoderRawData[0]-EncoderRawData[1]<-SignalThreshold){
 8002e70:	4b3b      	ldr	r3, [pc, #236]	; (8002f60 <EncoderRead+0x100>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b3a      	ldr	r3, [pc, #232]	; (8002f60 <EncoderRead+0x100>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	1ad2      	subs	r2, r2, r3
 8002e7a:	4b3a      	ldr	r3, [pc, #232]	; (8002f64 <EncoderRead+0x104>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	425b      	negs	r3, r3
 8002e80:	429a      	cmp	r2, r3
 8002e82:	da07      	bge.n	8002e94 <EncoderRead+0x34>
		WrappingStep+=12000;
 8002e84:	4b38      	ldr	r3, [pc, #224]	; (8002f68 <EncoderRead+0x108>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8002e8c:	3320      	adds	r3, #32
 8002e8e:	4a36      	ldr	r2, [pc, #216]	; (8002f68 <EncoderRead+0x108>)
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	e00f      	b.n	8002eb4 <EncoderRead+0x54>
	}
	else if(EncoderRawData[0]-EncoderRawData[1]>=SignalThreshold){
 8002e94:	4b32      	ldr	r3, [pc, #200]	; (8002f60 <EncoderRead+0x100>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	4b31      	ldr	r3, [pc, #196]	; (8002f60 <EncoderRead+0x100>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	1ad2      	subs	r2, r2, r3
 8002e9e:	4b31      	ldr	r3, [pc, #196]	; (8002f64 <EncoderRead+0x104>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	db06      	blt.n	8002eb4 <EncoderRead+0x54>
		WrappingStep-=12000;
 8002ea6:	4b30      	ldr	r3, [pc, #192]	; (8002f68 <EncoderRead+0x108>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f5a3 533b 	sub.w	r3, r3, #11968	; 0x2ec0
 8002eae:	3b20      	subs	r3, #32
 8002eb0:	4a2d      	ldr	r2, [pc, #180]	; (8002f68 <EncoderRead+0x108>)
 8002eb2:	6013      	str	r3, [r2, #0]
	}
	PositionRaw = EncoderRawData[0] + WrappingStep;
 8002eb4:	4b2a      	ldr	r3, [pc, #168]	; (8002f60 <EncoderRead+0x100>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	4b2b      	ldr	r3, [pc, #172]	; (8002f68 <EncoderRead+0x108>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	4a2b      	ldr	r2, [pc, #172]	; (8002f6c <EncoderRead+0x10c>)
 8002ec0:	6013      	str	r3, [r2, #0]
	PositionRad = (PositionRaw/12000.0)*2.0*3.14;
 8002ec2:	4b2a      	ldr	r3, [pc, #168]	; (8002f6c <EncoderRead+0x10c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd fad8 	bl	800047c <__aeabi_i2d>
 8002ecc:	a320      	add	r3, pc, #128	; (adr r3, 8002f50 <EncoderRead+0xf0>)
 8002ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed2:	f7fd fc67 	bl	80007a4 <__aeabi_ddiv>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4610      	mov	r0, r2
 8002edc:	4619      	mov	r1, r3
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	f7fd f97f 	bl	80001e4 <__adddf3>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4610      	mov	r0, r2
 8002eec:	4619      	mov	r1, r3
 8002eee:	a31a      	add	r3, pc, #104	; (adr r3, 8002f58 <EncoderRead+0xf8>)
 8002ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef4:	f7fd fb2c 	bl	8000550 <__aeabi_dmul>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4610      	mov	r0, r2
 8002efe:	4619      	mov	r1, r3
 8002f00:	f7fd fd38 	bl	8000974 <__aeabi_d2f>
 8002f04:	4603      	mov	r3, r0
 8002f06:	4a1a      	ldr	r2, [pc, #104]	; (8002f70 <EncoderRead+0x110>)
 8002f08:	6013      	str	r3, [r2, #0]
	PositionDeg = (PositionRaw/12000.0)*360.0;
 8002f0a:	4b18      	ldr	r3, [pc, #96]	; (8002f6c <EncoderRead+0x10c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fd fab4 	bl	800047c <__aeabi_i2d>
 8002f14:	a30e      	add	r3, pc, #56	; (adr r3, 8002f50 <EncoderRead+0xf0>)
 8002f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f1a:	f7fd fc43 	bl	80007a4 <__aeabi_ddiv>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4610      	mov	r0, r2
 8002f24:	4619      	mov	r1, r3
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <EncoderRead+0x114>)
 8002f2c:	f7fd fb10 	bl	8000550 <__aeabi_dmul>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4610      	mov	r0, r2
 8002f36:	4619      	mov	r1, r3
 8002f38:	f7fd fd1c 	bl	8000974 <__aeabi_d2f>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	4a0e      	ldr	r2, [pc, #56]	; (8002f78 <EncoderRead+0x118>)
 8002f40:	6013      	str	r3, [r2, #0]
	EncoderRawData[1] = EncoderRawData[0];
 8002f42:	4b07      	ldr	r3, [pc, #28]	; (8002f60 <EncoderRead+0x100>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a06      	ldr	r2, [pc, #24]	; (8002f60 <EncoderRead+0x100>)
 8002f48:	6053      	str	r3, [r2, #4]
}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	00000000 	.word	0x00000000
 8002f54:	40c77000 	.word	0x40c77000
 8002f58:	51eb851f 	.word	0x51eb851f
 8002f5c:	40091eb8 	.word	0x40091eb8
 8002f60:	20000660 	.word	0x20000660
 8002f64:	20000478 	.word	0x20000478
 8002f68:	20000668 	.word	0x20000668
 8002f6c:	2000066c 	.word	0x2000066c
 8002f70:	20000674 	.word	0x20000674
 8002f74:	40768000 	.word	0x40768000
 8002f78:	20000670 	.word	0x20000670

08002f7c <PWMAbs>:

uint32_t PWMAbs(int32_t PWM){
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]

	if(PWM<0){
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	da02      	bge.n	8002f90 <PWMAbs+0x14>
		return PWM*-1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	425b      	negs	r3, r3
 8002f8e:	e000      	b.n	8002f92 <PWMAbs+0x16>
	}else{
		return PWM;
 8002f90:	687b      	ldr	r3, [r7, #4]
	}
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
	...

08002fa0 <Drivemotor>:


void Drivemotor(int32_t PWM){
 8002fa0:	b590      	push	{r4, r7, lr}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
	if(PWM<=0 && PWM>=-PWM_MAX){
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	dc11      	bgt.n	8002fd2 <Drivemotor+0x32>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a25      	ldr	r2, [pc, #148]	; (8003048 <Drivemotor+0xa8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	db0d      	blt.n	8002fd2 <Drivemotor+0x32>
		htim1.Instance->CCR1=PWMAbs(PWM);
 8002fb6:	4b25      	ldr	r3, [pc, #148]	; (800304c <Drivemotor+0xac>)
 8002fb8:	681c      	ldr	r4, [r3, #0]
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff ffde 	bl	8002f7c <PWMAbs>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fca:	4821      	ldr	r0, [pc, #132]	; (8003050 <Drivemotor+0xb0>)
 8002fcc:	f000 fdb4 	bl	8003b38 <HAL_GPIO_WritePin>
 8002fd0:	e036      	b.n	8003040 <Drivemotor+0xa0>
	}else if (PWM<-PWM_MAX){
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a1c      	ldr	r2, [pc, #112]	; (8003048 <Drivemotor+0xa8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	da0b      	bge.n	8002ff2 <Drivemotor+0x52>
		htim1.Instance->CCR1=PWM_MAX;
 8002fda:	4b1c      	ldr	r3, [pc, #112]	; (800304c <Drivemotor+0xac>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f242 7210 	movw	r2, #10000	; 0x2710
 8002fe2:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,0);
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fea:	4819      	ldr	r0, [pc, #100]	; (8003050 <Drivemotor+0xb0>)
 8002fec:	f000 fda4 	bl	8003b38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
	}else if(PWM>PWM_MAX){
		htim1.Instance->CCR1=PWM_MAX;
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
	}
}
 8002ff0:	e026      	b.n	8003040 <Drivemotor+0xa0>
	}else if(PWM>=0 && PWM<=PWM_MAX){
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	db12      	blt.n	800301e <Drivemotor+0x7e>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f242 7210 	movw	r2, #10000	; 0x2710
 8002ffe:	4293      	cmp	r3, r2
 8003000:	dc0d      	bgt.n	800301e <Drivemotor+0x7e>
		htim1.Instance->CCR1=PWMAbs(PWM);
 8003002:	4b12      	ldr	r3, [pc, #72]	; (800304c <Drivemotor+0xac>)
 8003004:	681c      	ldr	r4, [r3, #0]
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff ffb8 	bl	8002f7c <PWMAbs>
 800300c:	4603      	mov	r3, r0
 800300e:	6363      	str	r3, [r4, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8003010:	2201      	movs	r2, #1
 8003012:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003016:	480e      	ldr	r0, [pc, #56]	; (8003050 <Drivemotor+0xb0>)
 8003018:	f000 fd8e 	bl	8003b38 <HAL_GPIO_WritePin>
 800301c:	e010      	b.n	8003040 <Drivemotor+0xa0>
	}else if(PWM>PWM_MAX){
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f242 7210 	movw	r2, #10000	; 0x2710
 8003024:	4293      	cmp	r3, r2
 8003026:	dd0b      	ble.n	8003040 <Drivemotor+0xa0>
		htim1.Instance->CCR1=PWM_MAX;
 8003028:	4b08      	ldr	r3, [pc, #32]	; (800304c <Drivemotor+0xac>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f242 7210 	movw	r2, #10000	; 0x2710
 8003030:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,1);
 8003032:	2201      	movs	r2, #1
 8003034:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003038:	4805      	ldr	r0, [pc, #20]	; (8003050 <Drivemotor+0xb0>)
 800303a:	f000 fd7d 	bl	8003b38 <HAL_GPIO_WritePin>
}
 800303e:	e7ff      	b.n	8003040 <Drivemotor+0xa0>
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	bd90      	pop	{r4, r7, pc}
 8003048:	ffffd8f0 	.word	0xffffd8f0
 800304c:	200004a8 	.word	0x200004a8
 8003050:	40020000 	.word	0x40020000

08003054 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003054:	b5b0      	push	{r4, r5, r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af02      	add	r7, sp, #8
 800305a:	6078      	str	r0, [r7, #4]
	if (htim == &htim11) {
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a2a      	ldr	r2, [pc, #168]	; (8003108 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d10a      	bne.n	800307a <HAL_TIM_PeriodElapsedCallback+0x26>
		_micro += 65535;
 8003064:	4b29      	ldr	r3, [pc, #164]	; (800310c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800306e:	1854      	adds	r4, r2, r1
 8003070:	f143 0500 	adc.w	r5, r3, #0
 8003074:	4b25      	ldr	r3, [pc, #148]	; (800310c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003076:	e9c3 4500 	strd	r4, r5, [r3]
	}
	if (htim == &htim3) {
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a24      	ldr	r2, [pc, #144]	; (8003110 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d13d      	bne.n	80030fe <HAL_TIM_PeriodElapsedCallback+0xaa>
		EncoderRead();
 8003082:	f7ff feed 	bl	8002e60 <EncoderRead>
		KalmanFilterFunction(&KalmanVar,PositionDeg);
 8003086:	4b23      	ldr	r3, [pc, #140]	; (8003114 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003088:	edd3 7a00 	vldr	s15, [r3]
 800308c:	eeb0 0a67 	vmov.f32	s0, s15
 8003090:	4821      	ldr	r0, [pc, #132]	; (8003118 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003092:	f7fd ff9b 	bl	8000fcc <KalmanFilterFunction>
		if (flagT == 0)
 8003096:	4b21      	ldr	r3, [pc, #132]	; (800311c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d109      	bne.n	80030b2 <HAL_TIM_PeriodElapsedCallback+0x5e>
		{
			StartTime = Micros();
 800309e:	f000 f849 	bl	8003134 <Micros>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	491e      	ldr	r1, [pc, #120]	; (8003120 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80030a8:	e9c1 2300 	strd	r2, r3, [r1]
			flagT =1;
 80030ac:	4b1b      	ldr	r3, [pc, #108]	; (800311c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	701a      	strb	r2, [r3, #0]
		}
		CurrentTime = Micros();
 80030b2:	f000 f83f 	bl	8003134 <Micros>
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	491a      	ldr	r1, [pc, #104]	; (8003124 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80030bc:	e9c1 2300 	strd	r2, r3, [r1]
//		timeC = (CurrentTime - StartTime)/1000000.0;
		setpoint = TrajectoryEvaluation(&traject,StartTime,CurrentTime);
 80030c0:	4b17      	ldr	r3, [pc, #92]	; (8003120 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80030c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030c6:	4b17      	ldr	r3, [pc, #92]	; (8003124 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80030c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030cc:	e9cd 2300 	strd	r2, r3, [sp]
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4814      	ldr	r0, [pc, #80]	; (8003128 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80030d6:	f7fe ff8f 	bl	8001ff8 <TrajectoryEvaluation>
 80030da:	eef0 7a40 	vmov.f32	s15, s0
 80030de:	4b13      	ldr	r3, [pc, #76]	; (800312c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80030e0:	edc3 7a00 	vstr	s15, [r3]
//		setpoint = 20.0;
		PIDController_Update(&pid, setpoint, KalmanVar.MatState_Data[1]);
 80030e4:	4b11      	ldr	r3, [pc, #68]	; (800312c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80030e6:	edd3 7a00 	vldr	s15, [r3]
 80030ea:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80030ec:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 80030f0:	eef0 0a47 	vmov.f32	s1, s14
 80030f4:	eeb0 0a67 	vmov.f32	s0, s15
 80030f8:	480d      	ldr	r0, [pc, #52]	; (8003130 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80030fa:	f7fe f8b2 	bl	8001262 <PIDController_Update>
//		PIDVelocityController_Update(&PidVelo, setpoint, KalmanVar.MatState_Data[1]);
		}
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bdb0      	pop	{r4, r5, r7, pc}
 8003106:	bf00      	nop
 8003108:	200005c8 	.word	0x200005c8
 800310c:	20000658 	.word	0x20000658
 8003110:	20000538 	.word	0x20000538
 8003114:	20000670 	.word	0x20000670
 8003118:	20000000 	.word	0x20000000
 800311c:	20000678 	.word	0x20000678
 8003120:	20000680 	.word	0x20000680
 8003124:	20000688 	.word	0x20000688
 8003128:	200003c8 	.word	0x200003c8
 800312c:	200003c0 	.word	0x200003c0
 8003130:	20000354 	.word	0x20000354

08003134 <Micros>:

uint64_t Micros(){
 8003134:	b4b0      	push	{r4, r5, r7}
 8003136:	af00      	add	r7, sp, #0
	return _micro + TIM11->CNT;
 8003138:	4b08      	ldr	r3, [pc, #32]	; (800315c <Micros+0x28>)
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	2200      	movs	r2, #0
 800313e:	4618      	mov	r0, r3
 8003140:	4611      	mov	r1, r2
 8003142:	4b07      	ldr	r3, [pc, #28]	; (8003160 <Micros+0x2c>)
 8003144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003148:	1884      	adds	r4, r0, r2
 800314a:	eb41 0503 	adc.w	r5, r1, r3
 800314e:	4622      	mov	r2, r4
 8003150:	462b      	mov	r3, r5
}
 8003152:	4610      	mov	r0, r2
 8003154:	4619      	mov	r1, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	bcb0      	pop	{r4, r5, r7}
 800315a:	4770      	bx	lr
 800315c:	40014800 	.word	0x40014800
 8003160:	20000658 	.word	0x20000658

08003164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003168:	b672      	cpsid	i
}
 800316a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800316c:	e7fe      	b.n	800316c <Error_Handler+0x8>
	...

08003170 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	4b10      	ldr	r3, [pc, #64]	; (80031bc <HAL_MspInit+0x4c>)
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	4a0f      	ldr	r2, [pc, #60]	; (80031bc <HAL_MspInit+0x4c>)
 8003180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003184:	6453      	str	r3, [r2, #68]	; 0x44
 8003186:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <HAL_MspInit+0x4c>)
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800318e:	607b      	str	r3, [r7, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	603b      	str	r3, [r7, #0]
 8003196:	4b09      	ldr	r3, [pc, #36]	; (80031bc <HAL_MspInit+0x4c>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	4a08      	ldr	r2, [pc, #32]	; (80031bc <HAL_MspInit+0x4c>)
 800319c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a0:	6413      	str	r3, [r2, #64]	; 0x40
 80031a2:	4b06      	ldr	r3, [pc, #24]	; (80031bc <HAL_MspInit+0x4c>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80031ae:	2007      	movs	r0, #7
 80031b0:	f000 fafc 	bl	80037ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031b4:	bf00      	nop
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40023800 	.word	0x40023800

080031c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a0e      	ldr	r2, [pc, #56]	; (8003208 <HAL_TIM_PWM_MspInit+0x48>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d115      	bne.n	80031fe <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	4b0d      	ldr	r3, [pc, #52]	; (800320c <HAL_TIM_PWM_MspInit+0x4c>)
 80031d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031da:	4a0c      	ldr	r2, [pc, #48]	; (800320c <HAL_TIM_PWM_MspInit+0x4c>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	6453      	str	r3, [r2, #68]	; 0x44
 80031e2:	4b0a      	ldr	r3, [pc, #40]	; (800320c <HAL_TIM_PWM_MspInit+0x4c>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80031ee:	2200      	movs	r2, #0
 80031f0:	2100      	movs	r1, #0
 80031f2:	201a      	movs	r0, #26
 80031f4:	f000 fae5 	bl	80037c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80031f8:	201a      	movs	r0, #26
 80031fa:	f000 fafe 	bl	80037fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80031fe:	bf00      	nop
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40010000 	.word	0x40010000
 800320c:	40023800 	.word	0x40023800

08003210 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	; 0x28
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003218:	f107 0314 	add.w	r3, r7, #20
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	60da      	str	r2, [r3, #12]
 8003226:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003230:	d12b      	bne.n	800328a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003232:	2300      	movs	r3, #0
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	4b17      	ldr	r3, [pc, #92]	; (8003294 <HAL_TIM_Encoder_MspInit+0x84>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	4a16      	ldr	r2, [pc, #88]	; (8003294 <HAL_TIM_Encoder_MspInit+0x84>)
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	6413      	str	r3, [r2, #64]	; 0x40
 8003242:	4b14      	ldr	r3, [pc, #80]	; (8003294 <HAL_TIM_Encoder_MspInit+0x84>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	4b10      	ldr	r3, [pc, #64]	; (8003294 <HAL_TIM_Encoder_MspInit+0x84>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	4a0f      	ldr	r2, [pc, #60]	; (8003294 <HAL_TIM_Encoder_MspInit+0x84>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	6313      	str	r3, [r2, #48]	; 0x30
 800325e:	4b0d      	ldr	r3, [pc, #52]	; (8003294 <HAL_TIM_Encoder_MspInit+0x84>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800326a:	2303      	movs	r3, #3
 800326c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326e:	2302      	movs	r3, #2
 8003270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003276:	2300      	movs	r3, #0
 8003278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800327a:	2301      	movs	r3, #1
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800327e:	f107 0314 	add.w	r3, r7, #20
 8003282:	4619      	mov	r1, r3
 8003284:	4804      	ldr	r0, [pc, #16]	; (8003298 <HAL_TIM_Encoder_MspInit+0x88>)
 8003286:	f000 fad3 	bl	8003830 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800328a:	bf00      	nop
 800328c:	3728      	adds	r7, #40	; 0x28
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40023800 	.word	0x40023800
 8003298:	40020000 	.word	0x40020000

0800329c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a1c      	ldr	r2, [pc, #112]	; (800331c <HAL_TIM_Base_MspInit+0x80>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d116      	bne.n	80032dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	4b1b      	ldr	r3, [pc, #108]	; (8003320 <HAL_TIM_Base_MspInit+0x84>)
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	4a1a      	ldr	r2, [pc, #104]	; (8003320 <HAL_TIM_Base_MspInit+0x84>)
 80032b8:	f043 0302 	orr.w	r3, r3, #2
 80032bc:	6413      	str	r3, [r2, #64]	; 0x40
 80032be:	4b18      	ldr	r3, [pc, #96]	; (8003320 <HAL_TIM_Base_MspInit+0x84>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80032ca:	2200      	movs	r2, #0
 80032cc:	2100      	movs	r1, #0
 80032ce:	201d      	movs	r0, #29
 80032d0:	f000 fa77 	bl	80037c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80032d4:	201d      	movs	r0, #29
 80032d6:	f000 fa90 	bl	80037fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80032da:	e01a      	b.n	8003312 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a10      	ldr	r2, [pc, #64]	; (8003324 <HAL_TIM_Base_MspInit+0x88>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d115      	bne.n	8003312 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	4b0d      	ldr	r3, [pc, #52]	; (8003320 <HAL_TIM_Base_MspInit+0x84>)
 80032ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ee:	4a0c      	ldr	r2, [pc, #48]	; (8003320 <HAL_TIM_Base_MspInit+0x84>)
 80032f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032f4:	6453      	str	r3, [r2, #68]	; 0x44
 80032f6:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <HAL_TIM_Base_MspInit+0x84>)
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032fe:	60bb      	str	r3, [r7, #8]
 8003300:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003302:	2200      	movs	r2, #0
 8003304:	2100      	movs	r1, #0
 8003306:	201a      	movs	r0, #26
 8003308:	f000 fa5b 	bl	80037c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800330c:	201a      	movs	r0, #26
 800330e:	f000 fa74 	bl	80037fa <HAL_NVIC_EnableIRQ>
}
 8003312:	bf00      	nop
 8003314:	3710      	adds	r7, #16
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40000400 	.word	0x40000400
 8003320:	40023800 	.word	0x40023800
 8003324:	40014800 	.word	0x40014800

08003328 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003330:	f107 030c 	add.w	r3, r7, #12
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	605a      	str	r2, [r3, #4]
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	60da      	str	r2, [r3, #12]
 800333e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a12      	ldr	r2, [pc, #72]	; (8003390 <HAL_TIM_MspPostInit+0x68>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d11e      	bne.n	8003388 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	4b11      	ldr	r3, [pc, #68]	; (8003394 <HAL_TIM_MspPostInit+0x6c>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	4a10      	ldr	r2, [pc, #64]	; (8003394 <HAL_TIM_MspPostInit+0x6c>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6313      	str	r3, [r2, #48]	; 0x30
 800335a:	4b0e      	ldr	r3, [pc, #56]	; (8003394 <HAL_TIM_MspPostInit+0x6c>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800336a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336c:	2302      	movs	r3, #2
 800336e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003374:	2300      	movs	r3, #0
 8003376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003378:	2301      	movs	r3, #1
 800337a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800337c:	f107 030c 	add.w	r3, r7, #12
 8003380:	4619      	mov	r1, r3
 8003382:	4805      	ldr	r0, [pc, #20]	; (8003398 <HAL_TIM_MspPostInit+0x70>)
 8003384:	f000 fa54 	bl	8003830 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003388:	bf00      	nop
 800338a:	3720      	adds	r7, #32
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40010000 	.word	0x40010000
 8003394:	40023800 	.word	0x40023800
 8003398:	40020000 	.word	0x40020000

0800339c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08a      	sub	sp, #40	; 0x28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a4:	f107 0314 	add.w	r3, r7, #20
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	609a      	str	r2, [r3, #8]
 80033b0:	60da      	str	r2, [r3, #12]
 80033b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a19      	ldr	r2, [pc, #100]	; (8003420 <HAL_UART_MspInit+0x84>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d12b      	bne.n	8003416 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	4b18      	ldr	r3, [pc, #96]	; (8003424 <HAL_UART_MspInit+0x88>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	4a17      	ldr	r2, [pc, #92]	; (8003424 <HAL_UART_MspInit+0x88>)
 80033c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033cc:	6413      	str	r3, [r2, #64]	; 0x40
 80033ce:	4b15      	ldr	r3, [pc, #84]	; (8003424 <HAL_UART_MspInit+0x88>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	613b      	str	r3, [r7, #16]
 80033d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	4b11      	ldr	r3, [pc, #68]	; (8003424 <HAL_UART_MspInit+0x88>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	4a10      	ldr	r2, [pc, #64]	; (8003424 <HAL_UART_MspInit+0x88>)
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ea:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <HAL_UART_MspInit+0x88>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80033f6:	230c      	movs	r3, #12
 80033f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fa:	2302      	movs	r3, #2
 80033fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003402:	2303      	movs	r3, #3
 8003404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003406:	2307      	movs	r3, #7
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800340a:	f107 0314 	add.w	r3, r7, #20
 800340e:	4619      	mov	r1, r3
 8003410:	4805      	ldr	r0, [pc, #20]	; (8003428 <HAL_UART_MspInit+0x8c>)
 8003412:	f000 fa0d 	bl	8003830 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003416:	bf00      	nop
 8003418:	3728      	adds	r7, #40	; 0x28
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40004400 	.word	0x40004400
 8003424:	40023800 	.word	0x40023800
 8003428:	40020000 	.word	0x40020000

0800342c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003430:	e7fe      	b.n	8003430 <NMI_Handler+0x4>

08003432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003432:	b480      	push	{r7}
 8003434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003436:	e7fe      	b.n	8003436 <HardFault_Handler+0x4>

08003438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800343c:	e7fe      	b.n	800343c <MemManage_Handler+0x4>

0800343e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800343e:	b480      	push	{r7}
 8003440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003442:	e7fe      	b.n	8003442 <BusFault_Handler+0x4>

08003444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003448:	e7fe      	b.n	8003448 <UsageFault_Handler+0x4>

0800344a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800344a:	b480      	push	{r7}
 800344c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800344e:	bf00      	nop
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800345c:	bf00      	nop
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003466:	b480      	push	{r7}
 8003468:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003478:	f000 f8a8 	bl	80035cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800347c:	bf00      	nop
 800347e:	bd80      	pop	{r7, pc}

08003480 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003484:	4803      	ldr	r0, [pc, #12]	; (8003494 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8003486:	f001 faef 	bl	8004a68 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800348a:	4803      	ldr	r0, [pc, #12]	; (8003498 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 800348c:	f001 faec 	bl	8004a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003490:	bf00      	nop
 8003492:	bd80      	pop	{r7, pc}
 8003494:	200004a8 	.word	0x200004a8
 8003498:	200005c8 	.word	0x200005c8

0800349c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80034a0:	4802      	ldr	r0, [pc, #8]	; (80034ac <TIM3_IRQHandler+0x10>)
 80034a2:	f001 fae1 	bl	8004a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000538 	.word	0x20000538

080034b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034b4:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <SystemInit+0x20>)
 80034b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ba:	4a05      	ldr	r2, [pc, #20]	; (80034d0 <SystemInit+0x20>)
 80034bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034c4:	bf00      	nop
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	e000ed00 	.word	0xe000ed00

080034d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80034d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800350c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034d8:	480d      	ldr	r0, [pc, #52]	; (8003510 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80034da:	490e      	ldr	r1, [pc, #56]	; (8003514 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80034dc:	4a0e      	ldr	r2, [pc, #56]	; (8003518 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034e0:	e002      	b.n	80034e8 <LoopCopyDataInit>

080034e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034e6:	3304      	adds	r3, #4

080034e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034ec:	d3f9      	bcc.n	80034e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034ee:	4a0b      	ldr	r2, [pc, #44]	; (800351c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80034f0:	4c0b      	ldr	r4, [pc, #44]	; (8003520 <LoopFillZerobss+0x26>)
  movs r3, #0
 80034f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034f4:	e001      	b.n	80034fa <LoopFillZerobss>

080034f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034f8:	3204      	adds	r2, #4

080034fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034fc:	d3fb      	bcc.n	80034f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80034fe:	f7ff ffd7 	bl	80034b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003502:	f002 fea7 	bl	8006254 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003506:	f7ff f98b 	bl	8002820 <main>
  bx  lr    
 800350a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800350c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003514:	20000488 	.word	0x20000488
  ldr r2, =_sidata
 8003518:	080062ec 	.word	0x080062ec
  ldr r2, =_sbss
 800351c:	20000488 	.word	0x20000488
  ldr r4, =_ebss
 8003520:	20000698 	.word	0x20000698

08003524 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003524:	e7fe      	b.n	8003524 <ADC_IRQHandler>
	...

08003528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800352c:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <HAL_Init+0x40>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a0d      	ldr	r2, [pc, #52]	; (8003568 <HAL_Init+0x40>)
 8003532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003538:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <HAL_Init+0x40>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <HAL_Init+0x40>)
 800353e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003544:	4b08      	ldr	r3, [pc, #32]	; (8003568 <HAL_Init+0x40>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a07      	ldr	r2, [pc, #28]	; (8003568 <HAL_Init+0x40>)
 800354a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003550:	2003      	movs	r0, #3
 8003552:	f000 f92b 	bl	80037ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003556:	2000      	movs	r0, #0
 8003558:	f000 f808 	bl	800356c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800355c:	f7ff fe08 	bl	8003170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40023c00 	.word	0x40023c00

0800356c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003574:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <HAL_InitTick+0x54>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <HAL_InitTick+0x58>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	4619      	mov	r1, r3
 800357e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003582:	fbb3 f3f1 	udiv	r3, r3, r1
 8003586:	fbb2 f3f3 	udiv	r3, r2, r3
 800358a:	4618      	mov	r0, r3
 800358c:	f000 f943 	bl	8003816 <HAL_SYSTICK_Config>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e00e      	b.n	80035b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b0f      	cmp	r3, #15
 800359e:	d80a      	bhi.n	80035b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035a0:	2200      	movs	r2, #0
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	f04f 30ff 	mov.w	r0, #4294967295
 80035a8:	f000 f90b 	bl	80037c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035ac:	4a06      	ldr	r2, [pc, #24]	; (80035c8 <HAL_InitTick+0x5c>)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	e000      	b.n	80035b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	2000047c 	.word	0x2000047c
 80035c4:	20000484 	.word	0x20000484
 80035c8:	20000480 	.word	0x20000480

080035cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035d0:	4b06      	ldr	r3, [pc, #24]	; (80035ec <HAL_IncTick+0x20>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	461a      	mov	r2, r3
 80035d6:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_IncTick+0x24>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4413      	add	r3, r2
 80035dc:	4a04      	ldr	r2, [pc, #16]	; (80035f0 <HAL_IncTick+0x24>)
 80035de:	6013      	str	r3, [r2, #0]
}
 80035e0:	bf00      	nop
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	20000484 	.word	0x20000484
 80035f0:	20000694 	.word	0x20000694

080035f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  return uwTick;
 80035f8:	4b03      	ldr	r3, [pc, #12]	; (8003608 <HAL_GetTick+0x14>)
 80035fa:	681b      	ldr	r3, [r3, #0]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	20000694 	.word	0x20000694

0800360c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800361c:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <__NVIC_SetPriorityGrouping+0x44>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003628:	4013      	ands	r3, r2
 800362a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800363c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800363e:	4a04      	ldr	r2, [pc, #16]	; (8003650 <__NVIC_SetPriorityGrouping+0x44>)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	60d3      	str	r3, [r2, #12]
}
 8003644:	bf00      	nop
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	e000ed00 	.word	0xe000ed00

08003654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003658:	4b04      	ldr	r3, [pc, #16]	; (800366c <__NVIC_GetPriorityGrouping+0x18>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	0a1b      	lsrs	r3, r3, #8
 800365e:	f003 0307 	and.w	r3, r3, #7
}
 8003662:	4618      	mov	r0, r3
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	e000ed00 	.word	0xe000ed00

08003670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800367a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367e:	2b00      	cmp	r3, #0
 8003680:	db0b      	blt.n	800369a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	f003 021f 	and.w	r2, r3, #31
 8003688:	4907      	ldr	r1, [pc, #28]	; (80036a8 <__NVIC_EnableIRQ+0x38>)
 800368a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	2001      	movs	r0, #1
 8003692:	fa00 f202 	lsl.w	r2, r0, r2
 8003696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	e000e100 	.word	0xe000e100

080036ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	6039      	str	r1, [r7, #0]
 80036b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	db0a      	blt.n	80036d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	490c      	ldr	r1, [pc, #48]	; (80036f8 <__NVIC_SetPriority+0x4c>)
 80036c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ca:	0112      	lsls	r2, r2, #4
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	440b      	add	r3, r1
 80036d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036d4:	e00a      	b.n	80036ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	4908      	ldr	r1, [pc, #32]	; (80036fc <__NVIC_SetPriority+0x50>)
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	3b04      	subs	r3, #4
 80036e4:	0112      	lsls	r2, r2, #4
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	440b      	add	r3, r1
 80036ea:	761a      	strb	r2, [r3, #24]
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	e000e100 	.word	0xe000e100
 80036fc:	e000ed00 	.word	0xe000ed00

08003700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003700:	b480      	push	{r7}
 8003702:	b089      	sub	sp, #36	; 0x24
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f1c3 0307 	rsb	r3, r3, #7
 800371a:	2b04      	cmp	r3, #4
 800371c:	bf28      	it	cs
 800371e:	2304      	movcs	r3, #4
 8003720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	3304      	adds	r3, #4
 8003726:	2b06      	cmp	r3, #6
 8003728:	d902      	bls.n	8003730 <NVIC_EncodePriority+0x30>
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	3b03      	subs	r3, #3
 800372e:	e000      	b.n	8003732 <NVIC_EncodePriority+0x32>
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003734:	f04f 32ff 	mov.w	r2, #4294967295
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43da      	mvns	r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	401a      	ands	r2, r3
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003748:	f04f 31ff 	mov.w	r1, #4294967295
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	fa01 f303 	lsl.w	r3, r1, r3
 8003752:	43d9      	mvns	r1, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003758:	4313      	orrs	r3, r2
         );
}
 800375a:	4618      	mov	r0, r3
 800375c:	3724      	adds	r7, #36	; 0x24
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
	...

08003768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3b01      	subs	r3, #1
 8003774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003778:	d301      	bcc.n	800377e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800377a:	2301      	movs	r3, #1
 800377c:	e00f      	b.n	800379e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800377e:	4a0a      	ldr	r2, [pc, #40]	; (80037a8 <SysTick_Config+0x40>)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3b01      	subs	r3, #1
 8003784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003786:	210f      	movs	r1, #15
 8003788:	f04f 30ff 	mov.w	r0, #4294967295
 800378c:	f7ff ff8e 	bl	80036ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003790:	4b05      	ldr	r3, [pc, #20]	; (80037a8 <SysTick_Config+0x40>)
 8003792:	2200      	movs	r2, #0
 8003794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003796:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <SysTick_Config+0x40>)
 8003798:	2207      	movs	r2, #7
 800379a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	e000e010 	.word	0xe000e010

080037ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff ff29 	bl	800360c <__NVIC_SetPriorityGrouping>
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b086      	sub	sp, #24
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	4603      	mov	r3, r0
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	607a      	str	r2, [r7, #4]
 80037ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037d4:	f7ff ff3e 	bl	8003654 <__NVIC_GetPriorityGrouping>
 80037d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	6978      	ldr	r0, [r7, #20]
 80037e0:	f7ff ff8e 	bl	8003700 <NVIC_EncodePriority>
 80037e4:	4602      	mov	r2, r0
 80037e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ea:	4611      	mov	r1, r2
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff ff5d 	bl	80036ac <__NVIC_SetPriority>
}
 80037f2:	bf00      	nop
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b082      	sub	sp, #8
 80037fe:	af00      	add	r7, sp, #0
 8003800:	4603      	mov	r3, r0
 8003802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff ff31 	bl	8003670 <__NVIC_EnableIRQ>
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b082      	sub	sp, #8
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff ffa2 	bl	8003768 <SysTick_Config>
 8003824:	4603      	mov	r3, r0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003830:	b480      	push	{r7}
 8003832:	b089      	sub	sp, #36	; 0x24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800383e:	2300      	movs	r3, #0
 8003840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003842:	2300      	movs	r3, #0
 8003844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	e159      	b.n	8003b00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800384c:	2201      	movs	r2, #1
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4013      	ands	r3, r2
 800385e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	429a      	cmp	r2, r3
 8003866:	f040 8148 	bne.w	8003afa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	2b01      	cmp	r3, #1
 8003874:	d005      	beq.n	8003882 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800387e:	2b02      	cmp	r3, #2
 8003880:	d130      	bne.n	80038e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	2203      	movs	r2, #3
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43db      	mvns	r3, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4013      	ands	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038b8:	2201      	movs	r2, #1
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	091b      	lsrs	r3, r3, #4
 80038ce:	f003 0201 	and.w	r2, r3, #1
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	4313      	orrs	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d017      	beq.n	8003920 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	2203      	movs	r2, #3
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	43db      	mvns	r3, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4013      	ands	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d123      	bne.n	8003974 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	08da      	lsrs	r2, r3, #3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3208      	adds	r2, #8
 8003934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003938:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	220f      	movs	r2, #15
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4313      	orrs	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	08da      	lsrs	r2, r3, #3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3208      	adds	r2, #8
 800396e:	69b9      	ldr	r1, [r7, #24]
 8003970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	2203      	movs	r2, #3
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	43db      	mvns	r3, r3
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	4013      	ands	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f003 0203 	and.w	r2, r3, #3
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4313      	orrs	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 80a2 	beq.w	8003afa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	4b57      	ldr	r3, [pc, #348]	; (8003b18 <HAL_GPIO_Init+0x2e8>)
 80039bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039be:	4a56      	ldr	r2, [pc, #344]	; (8003b18 <HAL_GPIO_Init+0x2e8>)
 80039c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039c4:	6453      	str	r3, [r2, #68]	; 0x44
 80039c6:	4b54      	ldr	r3, [pc, #336]	; (8003b18 <HAL_GPIO_Init+0x2e8>)
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039d2:	4a52      	ldr	r2, [pc, #328]	; (8003b1c <HAL_GPIO_Init+0x2ec>)
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	089b      	lsrs	r3, r3, #2
 80039d8:	3302      	adds	r3, #2
 80039da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	220f      	movs	r2, #15
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43db      	mvns	r3, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4013      	ands	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a49      	ldr	r2, [pc, #292]	; (8003b20 <HAL_GPIO_Init+0x2f0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d019      	beq.n	8003a32 <HAL_GPIO_Init+0x202>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a48      	ldr	r2, [pc, #288]	; (8003b24 <HAL_GPIO_Init+0x2f4>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d013      	beq.n	8003a2e <HAL_GPIO_Init+0x1fe>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a47      	ldr	r2, [pc, #284]	; (8003b28 <HAL_GPIO_Init+0x2f8>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00d      	beq.n	8003a2a <HAL_GPIO_Init+0x1fa>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a46      	ldr	r2, [pc, #280]	; (8003b2c <HAL_GPIO_Init+0x2fc>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d007      	beq.n	8003a26 <HAL_GPIO_Init+0x1f6>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a45      	ldr	r2, [pc, #276]	; (8003b30 <HAL_GPIO_Init+0x300>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d101      	bne.n	8003a22 <HAL_GPIO_Init+0x1f2>
 8003a1e:	2304      	movs	r3, #4
 8003a20:	e008      	b.n	8003a34 <HAL_GPIO_Init+0x204>
 8003a22:	2307      	movs	r3, #7
 8003a24:	e006      	b.n	8003a34 <HAL_GPIO_Init+0x204>
 8003a26:	2303      	movs	r3, #3
 8003a28:	e004      	b.n	8003a34 <HAL_GPIO_Init+0x204>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e002      	b.n	8003a34 <HAL_GPIO_Init+0x204>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <HAL_GPIO_Init+0x204>
 8003a32:	2300      	movs	r3, #0
 8003a34:	69fa      	ldr	r2, [r7, #28]
 8003a36:	f002 0203 	and.w	r2, r2, #3
 8003a3a:	0092      	lsls	r2, r2, #2
 8003a3c:	4093      	lsls	r3, r2
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a44:	4935      	ldr	r1, [pc, #212]	; (8003b1c <HAL_GPIO_Init+0x2ec>)
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	089b      	lsrs	r3, r3, #2
 8003a4a:	3302      	adds	r3, #2
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a52:	4b38      	ldr	r3, [pc, #224]	; (8003b34 <HAL_GPIO_Init+0x304>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a76:	4a2f      	ldr	r2, [pc, #188]	; (8003b34 <HAL_GPIO_Init+0x304>)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a7c:	4b2d      	ldr	r3, [pc, #180]	; (8003b34 <HAL_GPIO_Init+0x304>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	43db      	mvns	r3, r3
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003aa0:	4a24      	ldr	r2, [pc, #144]	; (8003b34 <HAL_GPIO_Init+0x304>)
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003aa6:	4b23      	ldr	r3, [pc, #140]	; (8003b34 <HAL_GPIO_Init+0x304>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aca:	4a1a      	ldr	r2, [pc, #104]	; (8003b34 <HAL_GPIO_Init+0x304>)
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ad0:	4b18      	ldr	r3, [pc, #96]	; (8003b34 <HAL_GPIO_Init+0x304>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	4013      	ands	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003af4:	4a0f      	ldr	r2, [pc, #60]	; (8003b34 <HAL_GPIO_Init+0x304>)
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	3301      	adds	r3, #1
 8003afe:	61fb      	str	r3, [r7, #28]
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	2b0f      	cmp	r3, #15
 8003b04:	f67f aea2 	bls.w	800384c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b08:	bf00      	nop
 8003b0a:	bf00      	nop
 8003b0c:	3724      	adds	r7, #36	; 0x24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	40013800 	.word	0x40013800
 8003b20:	40020000 	.word	0x40020000
 8003b24:	40020400 	.word	0x40020400
 8003b28:	40020800 	.word	0x40020800
 8003b2c:	40020c00 	.word	0x40020c00
 8003b30:	40021000 	.word	0x40021000
 8003b34:	40013c00 	.word	0x40013c00

08003b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	807b      	strh	r3, [r7, #2]
 8003b44:	4613      	mov	r3, r2
 8003b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b48:	787b      	ldrb	r3, [r7, #1]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b4e:	887a      	ldrh	r2, [r7, #2]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b54:	e003      	b.n	8003b5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b56:	887b      	ldrh	r3, [r7, #2]
 8003b58:	041a      	lsls	r2, r3, #16
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	619a      	str	r2, [r3, #24]
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
	...

08003b6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e267      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d075      	beq.n	8003c76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b8a:	4b88      	ldr	r3, [pc, #544]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d00c      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b96:	4b85      	ldr	r3, [pc, #532]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d112      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ba2:	4b82      	ldr	r3, [pc, #520]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003baa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bae:	d10b      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb0:	4b7e      	ldr	r3, [pc, #504]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d05b      	beq.n	8003c74 <HAL_RCC_OscConfig+0x108>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d157      	bne.n	8003c74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e242      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd0:	d106      	bne.n	8003be0 <HAL_RCC_OscConfig+0x74>
 8003bd2:	4b76      	ldr	r3, [pc, #472]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a75      	ldr	r2, [pc, #468]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	e01d      	b.n	8003c1c <HAL_RCC_OscConfig+0xb0>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003be8:	d10c      	bne.n	8003c04 <HAL_RCC_OscConfig+0x98>
 8003bea:	4b70      	ldr	r3, [pc, #448]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a6f      	ldr	r2, [pc, #444]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	4b6d      	ldr	r3, [pc, #436]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a6c      	ldr	r2, [pc, #432]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	e00b      	b.n	8003c1c <HAL_RCC_OscConfig+0xb0>
 8003c04:	4b69      	ldr	r3, [pc, #420]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a68      	ldr	r2, [pc, #416]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	4b66      	ldr	r3, [pc, #408]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a65      	ldr	r2, [pc, #404]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d013      	beq.n	8003c4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c24:	f7ff fce6 	bl	80035f4 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c2c:	f7ff fce2 	bl	80035f4 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b64      	cmp	r3, #100	; 0x64
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e207      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3e:	4b5b      	ldr	r3, [pc, #364]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0xc0>
 8003c4a:	e014      	b.n	8003c76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4c:	f7ff fcd2 	bl	80035f4 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c54:	f7ff fcce 	bl	80035f4 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	; 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e1f3      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c66:	4b51      	ldr	r3, [pc, #324]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1f0      	bne.n	8003c54 <HAL_RCC_OscConfig+0xe8>
 8003c72:	e000      	b.n	8003c76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d063      	beq.n	8003d4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c82:	4b4a      	ldr	r3, [pc, #296]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 030c 	and.w	r3, r3, #12
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00b      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c8e:	4b47      	ldr	r3, [pc, #284]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d11c      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c9a:	4b44      	ldr	r3, [pc, #272]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d116      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ca6:	4b41      	ldr	r3, [pc, #260]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d005      	beq.n	8003cbe <HAL_RCC_OscConfig+0x152>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d001      	beq.n	8003cbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e1c7      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cbe:	4b3b      	ldr	r3, [pc, #236]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	4937      	ldr	r1, [pc, #220]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd2:	e03a      	b.n	8003d4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d020      	beq.n	8003d1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cdc:	4b34      	ldr	r3, [pc, #208]	; (8003db0 <HAL_RCC_OscConfig+0x244>)
 8003cde:	2201      	movs	r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce2:	f7ff fc87 	bl	80035f4 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cea:	f7ff fc83 	bl	80035f4 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e1a8      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfc:	4b2b      	ldr	r3, [pc, #172]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0f0      	beq.n	8003cea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d08:	4b28      	ldr	r3, [pc, #160]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	4925      	ldr	r1, [pc, #148]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	600b      	str	r3, [r1, #0]
 8003d1c:	e015      	b.n	8003d4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d1e:	4b24      	ldr	r3, [pc, #144]	; (8003db0 <HAL_RCC_OscConfig+0x244>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d24:	f7ff fc66 	bl	80035f4 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d2c:	f7ff fc62 	bl	80035f4 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e187      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d3e:	4b1b      	ldr	r3, [pc, #108]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f0      	bne.n	8003d2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0308 	and.w	r3, r3, #8
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d036      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d016      	beq.n	8003d8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d5e:	4b15      	ldr	r3, [pc, #84]	; (8003db4 <HAL_RCC_OscConfig+0x248>)
 8003d60:	2201      	movs	r2, #1
 8003d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d64:	f7ff fc46 	bl	80035f4 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d6c:	f7ff fc42 	bl	80035f4 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e167      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d7e:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f0      	beq.n	8003d6c <HAL_RCC_OscConfig+0x200>
 8003d8a:	e01b      	b.n	8003dc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d8c:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <HAL_RCC_OscConfig+0x248>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d92:	f7ff fc2f 	bl	80035f4 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d98:	e00e      	b.n	8003db8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d9a:	f7ff fc2b 	bl	80035f4 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d907      	bls.n	8003db8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e150      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
 8003dac:	40023800 	.word	0x40023800
 8003db0:	42470000 	.word	0x42470000
 8003db4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db8:	4b88      	ldr	r3, [pc, #544]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1ea      	bne.n	8003d9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 8097 	beq.w	8003f00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dd6:	4b81      	ldr	r3, [pc, #516]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10f      	bne.n	8003e02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	60bb      	str	r3, [r7, #8]
 8003de6:	4b7d      	ldr	r3, [pc, #500]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	4a7c      	ldr	r2, [pc, #496]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df0:	6413      	str	r3, [r2, #64]	; 0x40
 8003df2:	4b7a      	ldr	r3, [pc, #488]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	60bb      	str	r3, [r7, #8]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e02:	4b77      	ldr	r3, [pc, #476]	; (8003fe0 <HAL_RCC_OscConfig+0x474>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d118      	bne.n	8003e40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e0e:	4b74      	ldr	r3, [pc, #464]	; (8003fe0 <HAL_RCC_OscConfig+0x474>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a73      	ldr	r2, [pc, #460]	; (8003fe0 <HAL_RCC_OscConfig+0x474>)
 8003e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e1a:	f7ff fbeb 	bl	80035f4 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e22:	f7ff fbe7 	bl	80035f4 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e10c      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e34:	4b6a      	ldr	r3, [pc, #424]	; (8003fe0 <HAL_RCC_OscConfig+0x474>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0f0      	beq.n	8003e22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d106      	bne.n	8003e56 <HAL_RCC_OscConfig+0x2ea>
 8003e48:	4b64      	ldr	r3, [pc, #400]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4c:	4a63      	ldr	r2, [pc, #396]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e4e:	f043 0301 	orr.w	r3, r3, #1
 8003e52:	6713      	str	r3, [r2, #112]	; 0x70
 8003e54:	e01c      	b.n	8003e90 <HAL_RCC_OscConfig+0x324>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	2b05      	cmp	r3, #5
 8003e5c:	d10c      	bne.n	8003e78 <HAL_RCC_OscConfig+0x30c>
 8003e5e:	4b5f      	ldr	r3, [pc, #380]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e62:	4a5e      	ldr	r2, [pc, #376]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e64:	f043 0304 	orr.w	r3, r3, #4
 8003e68:	6713      	str	r3, [r2, #112]	; 0x70
 8003e6a:	4b5c      	ldr	r3, [pc, #368]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	4a5b      	ldr	r2, [pc, #364]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e70:	f043 0301 	orr.w	r3, r3, #1
 8003e74:	6713      	str	r3, [r2, #112]	; 0x70
 8003e76:	e00b      	b.n	8003e90 <HAL_RCC_OscConfig+0x324>
 8003e78:	4b58      	ldr	r3, [pc, #352]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7c:	4a57      	ldr	r2, [pc, #348]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e7e:	f023 0301 	bic.w	r3, r3, #1
 8003e82:	6713      	str	r3, [r2, #112]	; 0x70
 8003e84:	4b55      	ldr	r3, [pc, #340]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e88:	4a54      	ldr	r2, [pc, #336]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e8a:	f023 0304 	bic.w	r3, r3, #4
 8003e8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d015      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e98:	f7ff fbac 	bl	80035f4 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e9e:	e00a      	b.n	8003eb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea0:	f7ff fba8 	bl	80035f4 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e0cb      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb6:	4b49      	ldr	r3, [pc, #292]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0ee      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x334>
 8003ec2:	e014      	b.n	8003eee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ec4:	f7ff fb96 	bl	80035f4 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eca:	e00a      	b.n	8003ee2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ecc:	f7ff fb92 	bl	80035f4 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e0b5      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee2:	4b3e      	ldr	r3, [pc, #248]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1ee      	bne.n	8003ecc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d105      	bne.n	8003f00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef4:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	4a38      	ldr	r2, [pc, #224]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003efe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 80a1 	beq.w	800404c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f0a:	4b34      	ldr	r3, [pc, #208]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 030c 	and.w	r3, r3, #12
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d05c      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d141      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f1e:	4b31      	ldr	r3, [pc, #196]	; (8003fe4 <HAL_RCC_OscConfig+0x478>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f24:	f7ff fb66 	bl	80035f4 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f2c:	f7ff fb62 	bl	80035f4 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e087      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f3e:	4b27      	ldr	r3, [pc, #156]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f0      	bne.n	8003f2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69da      	ldr	r2, [r3, #28]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	019b      	lsls	r3, r3, #6
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	085b      	lsrs	r3, r3, #1
 8003f62:	3b01      	subs	r3, #1
 8003f64:	041b      	lsls	r3, r3, #16
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	061b      	lsls	r3, r3, #24
 8003f6e:	491b      	ldr	r1, [pc, #108]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f74:	4b1b      	ldr	r3, [pc, #108]	; (8003fe4 <HAL_RCC_OscConfig+0x478>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7a:	f7ff fb3b 	bl	80035f4 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f82:	f7ff fb37 	bl	80035f4 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e05c      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f94:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0f0      	beq.n	8003f82 <HAL_RCC_OscConfig+0x416>
 8003fa0:	e054      	b.n	800404c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa2:	4b10      	ldr	r3, [pc, #64]	; (8003fe4 <HAL_RCC_OscConfig+0x478>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa8:	f7ff fb24 	bl	80035f4 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb0:	f7ff fb20 	bl	80035f4 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e045      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc2:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x444>
 8003fce:	e03d      	b.n	800404c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d107      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e038      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	40007000 	.word	0x40007000
 8003fe4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fe8:	4b1b      	ldr	r3, [pc, #108]	; (8004058 <HAL_RCC_OscConfig+0x4ec>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d028      	beq.n	8004048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004000:	429a      	cmp	r2, r3
 8004002:	d121      	bne.n	8004048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800400e:	429a      	cmp	r2, r3
 8004010:	d11a      	bne.n	8004048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004018:	4013      	ands	r3, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800401e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004020:	4293      	cmp	r3, r2
 8004022:	d111      	bne.n	8004048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402e:	085b      	lsrs	r3, r3, #1
 8004030:	3b01      	subs	r3, #1
 8004032:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004034:	429a      	cmp	r2, r3
 8004036:	d107      	bne.n	8004048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004044:	429a      	cmp	r2, r3
 8004046:	d001      	beq.n	800404c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40023800 	.word	0x40023800

0800405c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0cc      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004070:	4b68      	ldr	r3, [pc, #416]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d90c      	bls.n	8004098 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407e:	4b65      	ldr	r3, [pc, #404]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004086:	4b63      	ldr	r3, [pc, #396]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d001      	beq.n	8004098 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0b8      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d020      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040b0:	4b59      	ldr	r3, [pc, #356]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	4a58      	ldr	r2, [pc, #352]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040c8:	4b53      	ldr	r3, [pc, #332]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	4a52      	ldr	r2, [pc, #328]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d4:	4b50      	ldr	r3, [pc, #320]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	494d      	ldr	r1, [pc, #308]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d044      	beq.n	800417c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d107      	bne.n	800410a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fa:	4b47      	ldr	r3, [pc, #284]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d119      	bne.n	800413a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e07f      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b02      	cmp	r3, #2
 8004110:	d003      	beq.n	800411a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004116:	2b03      	cmp	r3, #3
 8004118:	d107      	bne.n	800412a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411a:	4b3f      	ldr	r3, [pc, #252]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e06f      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800412a:	4b3b      	ldr	r3, [pc, #236]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e067      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800413a:	4b37      	ldr	r3, [pc, #220]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f023 0203 	bic.w	r2, r3, #3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4934      	ldr	r1, [pc, #208]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 8004148:	4313      	orrs	r3, r2
 800414a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800414c:	f7ff fa52 	bl	80035f4 <HAL_GetTick>
 8004150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004152:	e00a      	b.n	800416a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004154:	f7ff fa4e 	bl	80035f4 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004162:	4293      	cmp	r3, r2
 8004164:	d901      	bls.n	800416a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e04f      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416a:	4b2b      	ldr	r3, [pc, #172]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 020c 	and.w	r2, r3, #12
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	429a      	cmp	r2, r3
 800417a:	d1eb      	bne.n	8004154 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800417c:	4b25      	ldr	r3, [pc, #148]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d20c      	bcs.n	80041a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418a:	4b22      	ldr	r3, [pc, #136]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004192:	4b20      	ldr	r3, [pc, #128]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d001      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e032      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041b0:	4b19      	ldr	r3, [pc, #100]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	4916      	ldr	r1, [pc, #88]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d009      	beq.n	80041e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ce:	4b12      	ldr	r3, [pc, #72]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	490e      	ldr	r1, [pc, #56]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041e2:	f000 f821 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 80041e6:	4602      	mov	r2, r0
 80041e8:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	091b      	lsrs	r3, r3, #4
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	490a      	ldr	r1, [pc, #40]	; (800421c <HAL_RCC_ClockConfig+0x1c0>)
 80041f4:	5ccb      	ldrb	r3, [r1, r3]
 80041f6:	fa22 f303 	lsr.w	r3, r2, r3
 80041fa:	4a09      	ldr	r2, [pc, #36]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80041fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041fe:	4b09      	ldr	r3, [pc, #36]	; (8004224 <HAL_RCC_ClockConfig+0x1c8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff f9b2 	bl	800356c <HAL_InitTick>

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40023c00 	.word	0x40023c00
 8004218:	40023800 	.word	0x40023800
 800421c:	080062c4 	.word	0x080062c4
 8004220:	2000047c 	.word	0x2000047c
 8004224:	20000480 	.word	0x20000480

08004228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800422c:	b094      	sub	sp, #80	; 0x50
 800422e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	647b      	str	r3, [r7, #68]	; 0x44
 8004234:	2300      	movs	r3, #0
 8004236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004238:	2300      	movs	r3, #0
 800423a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004240:	4b79      	ldr	r3, [pc, #484]	; (8004428 <HAL_RCC_GetSysClockFreq+0x200>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 030c 	and.w	r3, r3, #12
 8004248:	2b08      	cmp	r3, #8
 800424a:	d00d      	beq.n	8004268 <HAL_RCC_GetSysClockFreq+0x40>
 800424c:	2b08      	cmp	r3, #8
 800424e:	f200 80e1 	bhi.w	8004414 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <HAL_RCC_GetSysClockFreq+0x34>
 8004256:	2b04      	cmp	r3, #4
 8004258:	d003      	beq.n	8004262 <HAL_RCC_GetSysClockFreq+0x3a>
 800425a:	e0db      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800425c:	4b73      	ldr	r3, [pc, #460]	; (800442c <HAL_RCC_GetSysClockFreq+0x204>)
 800425e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004260:	e0db      	b.n	800441a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004262:	4b73      	ldr	r3, [pc, #460]	; (8004430 <HAL_RCC_GetSysClockFreq+0x208>)
 8004264:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004266:	e0d8      	b.n	800441a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004268:	4b6f      	ldr	r3, [pc, #444]	; (8004428 <HAL_RCC_GetSysClockFreq+0x200>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004270:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004272:	4b6d      	ldr	r3, [pc, #436]	; (8004428 <HAL_RCC_GetSysClockFreq+0x200>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d063      	beq.n	8004346 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800427e:	4b6a      	ldr	r3, [pc, #424]	; (8004428 <HAL_RCC_GetSysClockFreq+0x200>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	099b      	lsrs	r3, r3, #6
 8004284:	2200      	movs	r2, #0
 8004286:	63bb      	str	r3, [r7, #56]	; 0x38
 8004288:	63fa      	str	r2, [r7, #60]	; 0x3c
 800428a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004290:	633b      	str	r3, [r7, #48]	; 0x30
 8004292:	2300      	movs	r3, #0
 8004294:	637b      	str	r3, [r7, #52]	; 0x34
 8004296:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800429a:	4622      	mov	r2, r4
 800429c:	462b      	mov	r3, r5
 800429e:	f04f 0000 	mov.w	r0, #0
 80042a2:	f04f 0100 	mov.w	r1, #0
 80042a6:	0159      	lsls	r1, r3, #5
 80042a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042ac:	0150      	lsls	r0, r2, #5
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	4621      	mov	r1, r4
 80042b4:	1a51      	subs	r1, r2, r1
 80042b6:	6139      	str	r1, [r7, #16]
 80042b8:	4629      	mov	r1, r5
 80042ba:	eb63 0301 	sbc.w	r3, r3, r1
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042cc:	4659      	mov	r1, fp
 80042ce:	018b      	lsls	r3, r1, #6
 80042d0:	4651      	mov	r1, sl
 80042d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042d6:	4651      	mov	r1, sl
 80042d8:	018a      	lsls	r2, r1, #6
 80042da:	4651      	mov	r1, sl
 80042dc:	ebb2 0801 	subs.w	r8, r2, r1
 80042e0:	4659      	mov	r1, fp
 80042e2:	eb63 0901 	sbc.w	r9, r3, r1
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	f04f 0300 	mov.w	r3, #0
 80042ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042fa:	4690      	mov	r8, r2
 80042fc:	4699      	mov	r9, r3
 80042fe:	4623      	mov	r3, r4
 8004300:	eb18 0303 	adds.w	r3, r8, r3
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	462b      	mov	r3, r5
 8004308:	eb49 0303 	adc.w	r3, r9, r3
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	f04f 0300 	mov.w	r3, #0
 8004316:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800431a:	4629      	mov	r1, r5
 800431c:	024b      	lsls	r3, r1, #9
 800431e:	4621      	mov	r1, r4
 8004320:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004324:	4621      	mov	r1, r4
 8004326:	024a      	lsls	r2, r1, #9
 8004328:	4610      	mov	r0, r2
 800432a:	4619      	mov	r1, r3
 800432c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800432e:	2200      	movs	r2, #0
 8004330:	62bb      	str	r3, [r7, #40]	; 0x28
 8004332:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004334:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004338:	f7fc fb6c 	bl	8000a14 <__aeabi_uldivmod>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4613      	mov	r3, r2
 8004342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004344:	e058      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004346:	4b38      	ldr	r3, [pc, #224]	; (8004428 <HAL_RCC_GetSysClockFreq+0x200>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	099b      	lsrs	r3, r3, #6
 800434c:	2200      	movs	r2, #0
 800434e:	4618      	mov	r0, r3
 8004350:	4611      	mov	r1, r2
 8004352:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004356:	623b      	str	r3, [r7, #32]
 8004358:	2300      	movs	r3, #0
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
 800435c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004360:	4642      	mov	r2, r8
 8004362:	464b      	mov	r3, r9
 8004364:	f04f 0000 	mov.w	r0, #0
 8004368:	f04f 0100 	mov.w	r1, #0
 800436c:	0159      	lsls	r1, r3, #5
 800436e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004372:	0150      	lsls	r0, r2, #5
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4641      	mov	r1, r8
 800437a:	ebb2 0a01 	subs.w	sl, r2, r1
 800437e:	4649      	mov	r1, r9
 8004380:	eb63 0b01 	sbc.w	fp, r3, r1
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004390:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004394:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004398:	ebb2 040a 	subs.w	r4, r2, sl
 800439c:	eb63 050b 	sbc.w	r5, r3, fp
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	00eb      	lsls	r3, r5, #3
 80043aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ae:	00e2      	lsls	r2, r4, #3
 80043b0:	4614      	mov	r4, r2
 80043b2:	461d      	mov	r5, r3
 80043b4:	4643      	mov	r3, r8
 80043b6:	18e3      	adds	r3, r4, r3
 80043b8:	603b      	str	r3, [r7, #0]
 80043ba:	464b      	mov	r3, r9
 80043bc:	eb45 0303 	adc.w	r3, r5, r3
 80043c0:	607b      	str	r3, [r7, #4]
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	f04f 0300 	mov.w	r3, #0
 80043ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043ce:	4629      	mov	r1, r5
 80043d0:	028b      	lsls	r3, r1, #10
 80043d2:	4621      	mov	r1, r4
 80043d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043d8:	4621      	mov	r1, r4
 80043da:	028a      	lsls	r2, r1, #10
 80043dc:	4610      	mov	r0, r2
 80043de:	4619      	mov	r1, r3
 80043e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043e2:	2200      	movs	r2, #0
 80043e4:	61bb      	str	r3, [r7, #24]
 80043e6:	61fa      	str	r2, [r7, #28]
 80043e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043ec:	f7fc fb12 	bl	8000a14 <__aeabi_uldivmod>
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	4613      	mov	r3, r2
 80043f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043f8:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <HAL_RCC_GetSysClockFreq+0x200>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	0c1b      	lsrs	r3, r3, #16
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	3301      	adds	r3, #1
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004408:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800440a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800440c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004410:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004412:	e002      	b.n	800441a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004414:	4b05      	ldr	r3, [pc, #20]	; (800442c <HAL_RCC_GetSysClockFreq+0x204>)
 8004416:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004418:	bf00      	nop
    }
  }
  return sysclockfreq;
 800441a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800441c:	4618      	mov	r0, r3
 800441e:	3750      	adds	r7, #80	; 0x50
 8004420:	46bd      	mov	sp, r7
 8004422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004426:	bf00      	nop
 8004428:	40023800 	.word	0x40023800
 800442c:	00f42400 	.word	0x00f42400
 8004430:	007a1200 	.word	0x007a1200

08004434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004438:	4b03      	ldr	r3, [pc, #12]	; (8004448 <HAL_RCC_GetHCLKFreq+0x14>)
 800443a:	681b      	ldr	r3, [r3, #0]
}
 800443c:	4618      	mov	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	2000047c 	.word	0x2000047c

0800444c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004450:	f7ff fff0 	bl	8004434 <HAL_RCC_GetHCLKFreq>
 8004454:	4602      	mov	r2, r0
 8004456:	4b05      	ldr	r3, [pc, #20]	; (800446c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	0a9b      	lsrs	r3, r3, #10
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	4903      	ldr	r1, [pc, #12]	; (8004470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004462:	5ccb      	ldrb	r3, [r1, r3]
 8004464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004468:	4618      	mov	r0, r3
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40023800 	.word	0x40023800
 8004470:	080062d4 	.word	0x080062d4

08004474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004478:	f7ff ffdc 	bl	8004434 <HAL_RCC_GetHCLKFreq>
 800447c:	4602      	mov	r2, r0
 800447e:	4b05      	ldr	r3, [pc, #20]	; (8004494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	0b5b      	lsrs	r3, r3, #13
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	4903      	ldr	r1, [pc, #12]	; (8004498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800448a:	5ccb      	ldrb	r3, [r1, r3]
 800448c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004490:	4618      	mov	r0, r3
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40023800 	.word	0x40023800
 8004498:	080062d4 	.word	0x080062d4

0800449c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e041      	b.n	8004532 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fe feea 	bl	800329c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3304      	adds	r3, #4
 80044d8:	4619      	mov	r1, r3
 80044da:	4610      	mov	r0, r2
 80044dc:	f000 fd7e 	bl	8004fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b01      	cmp	r3, #1
 800454e:	d001      	beq.n	8004554 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e044      	b.n	80045de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0201 	orr.w	r2, r2, #1
 800456a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a1e      	ldr	r2, [pc, #120]	; (80045ec <HAL_TIM_Base_Start_IT+0xb0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d018      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457e:	d013      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a1a      	ldr	r2, [pc, #104]	; (80045f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00e      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x6c>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a19      	ldr	r2, [pc, #100]	; (80045f4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d009      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a17      	ldr	r2, [pc, #92]	; (80045f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d004      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x6c>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a16      	ldr	r2, [pc, #88]	; (80045fc <HAL_TIM_Base_Start_IT+0xc0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d111      	bne.n	80045cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b06      	cmp	r3, #6
 80045b8:	d010      	beq.n	80045dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0201 	orr.w	r2, r2, #1
 80045c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ca:	e007      	b.n	80045dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40010000 	.word	0x40010000
 80045f0:	40000400 	.word	0x40000400
 80045f4:	40000800 	.word	0x40000800
 80045f8:	40000c00 	.word	0x40000c00
 80045fc:	40014000 	.word	0x40014000

08004600 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e041      	b.n	8004696 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d106      	bne.n	800462c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7fe fdca 	bl	80031c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3304      	adds	r3, #4
 800463c:	4619      	mov	r1, r3
 800463e:	4610      	mov	r0, r2
 8004640:	f000 fccc 	bl	8004fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
	...

080046a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d109      	bne.n	80046c4 <HAL_TIM_PWM_Start+0x24>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	bf14      	ite	ne
 80046bc:	2301      	movne	r3, #1
 80046be:	2300      	moveq	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	e022      	b.n	800470a <HAL_TIM_PWM_Start+0x6a>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2b04      	cmp	r3, #4
 80046c8:	d109      	bne.n	80046de <HAL_TIM_PWM_Start+0x3e>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	bf14      	ite	ne
 80046d6:	2301      	movne	r3, #1
 80046d8:	2300      	moveq	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	e015      	b.n	800470a <HAL_TIM_PWM_Start+0x6a>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d109      	bne.n	80046f8 <HAL_TIM_PWM_Start+0x58>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	bf14      	ite	ne
 80046f0:	2301      	movne	r3, #1
 80046f2:	2300      	moveq	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	e008      	b.n	800470a <HAL_TIM_PWM_Start+0x6a>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b01      	cmp	r3, #1
 8004702:	bf14      	ite	ne
 8004704:	2301      	movne	r3, #1
 8004706:	2300      	moveq	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e068      	b.n	80047e4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d104      	bne.n	8004722 <HAL_TIM_PWM_Start+0x82>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004720:	e013      	b.n	800474a <HAL_TIM_PWM_Start+0xaa>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b04      	cmp	r3, #4
 8004726:	d104      	bne.n	8004732 <HAL_TIM_PWM_Start+0x92>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004730:	e00b      	b.n	800474a <HAL_TIM_PWM_Start+0xaa>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b08      	cmp	r3, #8
 8004736:	d104      	bne.n	8004742 <HAL_TIM_PWM_Start+0xa2>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004740:	e003      	b.n	800474a <HAL_TIM_PWM_Start+0xaa>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2202      	movs	r2, #2
 8004746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2201      	movs	r2, #1
 8004750:	6839      	ldr	r1, [r7, #0]
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fee8 	bl	8005528 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a23      	ldr	r2, [pc, #140]	; (80047ec <HAL_TIM_PWM_Start+0x14c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d107      	bne.n	8004772 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004770:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1d      	ldr	r2, [pc, #116]	; (80047ec <HAL_TIM_PWM_Start+0x14c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d018      	beq.n	80047ae <HAL_TIM_PWM_Start+0x10e>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004784:	d013      	beq.n	80047ae <HAL_TIM_PWM_Start+0x10e>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a19      	ldr	r2, [pc, #100]	; (80047f0 <HAL_TIM_PWM_Start+0x150>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d00e      	beq.n	80047ae <HAL_TIM_PWM_Start+0x10e>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a17      	ldr	r2, [pc, #92]	; (80047f4 <HAL_TIM_PWM_Start+0x154>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d009      	beq.n	80047ae <HAL_TIM_PWM_Start+0x10e>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a16      	ldr	r2, [pc, #88]	; (80047f8 <HAL_TIM_PWM_Start+0x158>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d004      	beq.n	80047ae <HAL_TIM_PWM_Start+0x10e>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a14      	ldr	r2, [pc, #80]	; (80047fc <HAL_TIM_PWM_Start+0x15c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d111      	bne.n	80047d2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b06      	cmp	r3, #6
 80047be:	d010      	beq.n	80047e2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0201 	orr.w	r2, r2, #1
 80047ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d0:	e007      	b.n	80047e2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f042 0201 	orr.w	r2, r2, #1
 80047e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	40010000 	.word	0x40010000
 80047f0:	40000400 	.word	0x40000400
 80047f4:	40000800 	.word	0x40000800
 80047f8:	40000c00 	.word	0x40000c00
 80047fc:	40014000 	.word	0x40014000

08004800 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e097      	b.n	8004944 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d106      	bne.n	800482e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7fe fcf1 	bl	8003210 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2202      	movs	r2, #2
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6812      	ldr	r2, [r2, #0]
 8004840:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004844:	f023 0307 	bic.w	r3, r3, #7
 8004848:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3304      	adds	r3, #4
 8004852:	4619      	mov	r1, r3
 8004854:	4610      	mov	r0, r2
 8004856:	f000 fbc1 	bl	8004fdc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	4313      	orrs	r3, r2
 800487a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004882:	f023 0303 	bic.w	r3, r3, #3
 8004886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	021b      	lsls	r3, r3, #8
 8004892:	4313      	orrs	r3, r2
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4313      	orrs	r3, r2
 8004898:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80048a0:	f023 030c 	bic.w	r3, r3, #12
 80048a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	021b      	lsls	r3, r3, #8
 80048bc:	4313      	orrs	r3, r2
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	011a      	lsls	r2, r3, #4
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	031b      	lsls	r3, r3, #12
 80048d0:	4313      	orrs	r3, r2
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80048de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80048e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	4313      	orrs	r3, r2
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800495c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004964:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800496c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004974:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d110      	bne.n	800499e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800497c:	7bfb      	ldrb	r3, [r7, #15]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d102      	bne.n	8004988 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004982:	7b7b      	ldrb	r3, [r7, #13]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d001      	beq.n	800498c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e069      	b.n	8004a60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800499c:	e031      	b.n	8004a02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d110      	bne.n	80049c6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049a4:	7bbb      	ldrb	r3, [r7, #14]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d102      	bne.n	80049b0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049aa:	7b3b      	ldrb	r3, [r7, #12]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d001      	beq.n	80049b4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e055      	b.n	8004a60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049c4:	e01d      	b.n	8004a02 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d108      	bne.n	80049de <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049cc:	7bbb      	ldrb	r3, [r7, #14]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d105      	bne.n	80049de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049d2:	7b7b      	ldrb	r3, [r7, #13]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d102      	bne.n	80049de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049d8:	7b3b      	ldrb	r3, [r7, #12]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d001      	beq.n	80049e2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e03e      	b.n	8004a60 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2202      	movs	r2, #2
 80049e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2202      	movs	r2, #2
 80049ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2202      	movs	r2, #2
 80049f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2202      	movs	r2, #2
 80049fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <HAL_TIM_Encoder_Start+0xc4>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d008      	beq.n	8004a20 <HAL_TIM_Encoder_Start+0xd4>
 8004a0e:	e00f      	b.n	8004a30 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2201      	movs	r2, #1
 8004a16:	2100      	movs	r1, #0
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 fd85 	bl	8005528 <TIM_CCxChannelCmd>
      break;
 8004a1e:	e016      	b.n	8004a4e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2201      	movs	r2, #1
 8004a26:	2104      	movs	r1, #4
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 fd7d 	bl	8005528 <TIM_CCxChannelCmd>
      break;
 8004a2e:	e00e      	b.n	8004a4e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2201      	movs	r2, #1
 8004a36:	2100      	movs	r1, #0
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 fd75 	bl	8005528 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2201      	movs	r2, #1
 8004a44:	2104      	movs	r1, #4
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fd6e 	bl	8005528 <TIM_CCxChannelCmd>
      break;
 8004a4c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0201 	orr.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d122      	bne.n	8004ac4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d11b      	bne.n	8004ac4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0202 	mvn.w	r2, #2
 8004a94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fa77 	bl	8004f9e <HAL_TIM_IC_CaptureCallback>
 8004ab0:	e005      	b.n	8004abe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fa69 	bl	8004f8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 fa7a 	bl	8004fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	f003 0304 	and.w	r3, r3, #4
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	d122      	bne.n	8004b18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	d11b      	bne.n	8004b18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f06f 0204 	mvn.w	r2, #4
 8004ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2202      	movs	r2, #2
 8004aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fa4d 	bl	8004f9e <HAL_TIM_IC_CaptureCallback>
 8004b04:	e005      	b.n	8004b12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fa3f 	bl	8004f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fa50 	bl	8004fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d122      	bne.n	8004b6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f003 0308 	and.w	r3, r3, #8
 8004b30:	2b08      	cmp	r3, #8
 8004b32:	d11b      	bne.n	8004b6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f06f 0208 	mvn.w	r2, #8
 8004b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2204      	movs	r2, #4
 8004b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fa23 	bl	8004f9e <HAL_TIM_IC_CaptureCallback>
 8004b58:	e005      	b.n	8004b66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 fa15 	bl	8004f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fa26 	bl	8004fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f003 0310 	and.w	r3, r3, #16
 8004b76:	2b10      	cmp	r3, #16
 8004b78:	d122      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f003 0310 	and.w	r3, r3, #16
 8004b84:	2b10      	cmp	r3, #16
 8004b86:	d11b      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f06f 0210 	mvn.w	r2, #16
 8004b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2208      	movs	r2, #8
 8004b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f9f9 	bl	8004f9e <HAL_TIM_IC_CaptureCallback>
 8004bac:	e005      	b.n	8004bba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f9eb 	bl	8004f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f9fc 	bl	8004fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d10e      	bne.n	8004bec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 0301 	and.w	r3, r3, #1
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d107      	bne.n	8004bec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0201 	mvn.w	r2, #1
 8004be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7fe fa34 	bl	8003054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf6:	2b80      	cmp	r3, #128	; 0x80
 8004bf8:	d10e      	bne.n	8004c18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c04:	2b80      	cmp	r3, #128	; 0x80
 8004c06:	d107      	bne.n	8004c18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fd78 	bl	8005708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c22:	2b40      	cmp	r3, #64	; 0x40
 8004c24:	d10e      	bne.n	8004c44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c30:	2b40      	cmp	r3, #64	; 0x40
 8004c32:	d107      	bne.n	8004c44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f9c1 	bl	8004fc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	f003 0320 	and.w	r3, r3, #32
 8004c4e:	2b20      	cmp	r3, #32
 8004c50:	d10e      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f003 0320 	and.w	r3, r3, #32
 8004c5c:	2b20      	cmp	r3, #32
 8004c5e:	d107      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f06f 0220 	mvn.w	r2, #32
 8004c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fd42 	bl	80056f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c70:	bf00      	nop
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c84:	2300      	movs	r3, #0
 8004c86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c92:	2302      	movs	r3, #2
 8004c94:	e0ae      	b.n	8004df4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b0c      	cmp	r3, #12
 8004ca2:	f200 809f 	bhi.w	8004de4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ca6:	a201      	add	r2, pc, #4	; (adr r2, 8004cac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cac:	08004ce1 	.word	0x08004ce1
 8004cb0:	08004de5 	.word	0x08004de5
 8004cb4:	08004de5 	.word	0x08004de5
 8004cb8:	08004de5 	.word	0x08004de5
 8004cbc:	08004d21 	.word	0x08004d21
 8004cc0:	08004de5 	.word	0x08004de5
 8004cc4:	08004de5 	.word	0x08004de5
 8004cc8:	08004de5 	.word	0x08004de5
 8004ccc:	08004d63 	.word	0x08004d63
 8004cd0:	08004de5 	.word	0x08004de5
 8004cd4:	08004de5 	.word	0x08004de5
 8004cd8:	08004de5 	.word	0x08004de5
 8004cdc:	08004da3 	.word	0x08004da3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68b9      	ldr	r1, [r7, #8]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 f9f8 	bl	80050dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	699a      	ldr	r2, [r3, #24]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0208 	orr.w	r2, r2, #8
 8004cfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0204 	bic.w	r2, r2, #4
 8004d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6999      	ldr	r1, [r3, #24]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	691a      	ldr	r2, [r3, #16]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	619a      	str	r2, [r3, #24]
      break;
 8004d1e:	e064      	b.n	8004dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68b9      	ldr	r1, [r7, #8]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 fa3e 	bl	80051a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699a      	ldr	r2, [r3, #24]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6999      	ldr	r1, [r3, #24]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	021a      	lsls	r2, r3, #8
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	619a      	str	r2, [r3, #24]
      break;
 8004d60:	e043      	b.n	8004dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68b9      	ldr	r1, [r7, #8]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 fa89 	bl	8005280 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69da      	ldr	r2, [r3, #28]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 0208 	orr.w	r2, r2, #8
 8004d7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69da      	ldr	r2, [r3, #28]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0204 	bic.w	r2, r2, #4
 8004d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	69d9      	ldr	r1, [r3, #28]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	61da      	str	r2, [r3, #28]
      break;
 8004da0:	e023      	b.n	8004dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68b9      	ldr	r1, [r7, #8]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 fad3 	bl	8005354 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	69da      	ldr	r2, [r3, #28]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	69da      	ldr	r2, [r3, #28]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69d9      	ldr	r1, [r3, #28]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	021a      	lsls	r2, r3, #8
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	61da      	str	r2, [r3, #28]
      break;
 8004de2:	e002      	b.n	8004dea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	75fb      	strb	r3, [r7, #23]
      break;
 8004de8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d101      	bne.n	8004e18 <HAL_TIM_ConfigClockSource+0x1c>
 8004e14:	2302      	movs	r3, #2
 8004e16:	e0b4      	b.n	8004f82 <HAL_TIM_ConfigClockSource+0x186>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e50:	d03e      	beq.n	8004ed0 <HAL_TIM_ConfigClockSource+0xd4>
 8004e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e56:	f200 8087 	bhi.w	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
 8004e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e5e:	f000 8086 	beq.w	8004f6e <HAL_TIM_ConfigClockSource+0x172>
 8004e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e66:	d87f      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
 8004e68:	2b70      	cmp	r3, #112	; 0x70
 8004e6a:	d01a      	beq.n	8004ea2 <HAL_TIM_ConfigClockSource+0xa6>
 8004e6c:	2b70      	cmp	r3, #112	; 0x70
 8004e6e:	d87b      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
 8004e70:	2b60      	cmp	r3, #96	; 0x60
 8004e72:	d050      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x11a>
 8004e74:	2b60      	cmp	r3, #96	; 0x60
 8004e76:	d877      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
 8004e78:	2b50      	cmp	r3, #80	; 0x50
 8004e7a:	d03c      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0xfa>
 8004e7c:	2b50      	cmp	r3, #80	; 0x50
 8004e7e:	d873      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
 8004e80:	2b40      	cmp	r3, #64	; 0x40
 8004e82:	d058      	beq.n	8004f36 <HAL_TIM_ConfigClockSource+0x13a>
 8004e84:	2b40      	cmp	r3, #64	; 0x40
 8004e86:	d86f      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
 8004e88:	2b30      	cmp	r3, #48	; 0x30
 8004e8a:	d064      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0x15a>
 8004e8c:	2b30      	cmp	r3, #48	; 0x30
 8004e8e:	d86b      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
 8004e90:	2b20      	cmp	r3, #32
 8004e92:	d060      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0x15a>
 8004e94:	2b20      	cmp	r3, #32
 8004e96:	d867      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d05c      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0x15a>
 8004e9c:	2b10      	cmp	r3, #16
 8004e9e:	d05a      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0x15a>
 8004ea0:	e062      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6818      	ldr	r0, [r3, #0]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	6899      	ldr	r1, [r3, #8]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f000 fb19 	bl	80054e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ec4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	609a      	str	r2, [r3, #8]
      break;
 8004ece:	e04f      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6818      	ldr	r0, [r3, #0]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	6899      	ldr	r1, [r3, #8]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f000 fb02 	bl	80054e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ef2:	609a      	str	r2, [r3, #8]
      break;
 8004ef4:	e03c      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	6859      	ldr	r1, [r3, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	461a      	mov	r2, r3
 8004f04:	f000 fa76 	bl	80053f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2150      	movs	r1, #80	; 0x50
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 facf 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 8004f14:	e02c      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	6859      	ldr	r1, [r3, #4]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	461a      	mov	r2, r3
 8004f24:	f000 fa95 	bl	8005452 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2160      	movs	r1, #96	; 0x60
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 fabf 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 8004f34:	e01c      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6818      	ldr	r0, [r3, #0]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	6859      	ldr	r1, [r3, #4]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	461a      	mov	r2, r3
 8004f44:	f000 fa56 	bl	80053f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2140      	movs	r1, #64	; 0x40
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 faaf 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 8004f54:	e00c      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4619      	mov	r1, r3
 8004f60:	4610      	mov	r0, r2
 8004f62:	f000 faa6 	bl	80054b2 <TIM_ITRx_SetConfig>
      break;
 8004f66:	e003      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f6c:	e000      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fba:	bf00      	nop
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
	...

08004fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a34      	ldr	r2, [pc, #208]	; (80050c0 <TIM_Base_SetConfig+0xe4>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d00f      	beq.n	8005014 <TIM_Base_SetConfig+0x38>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ffa:	d00b      	beq.n	8005014 <TIM_Base_SetConfig+0x38>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a31      	ldr	r2, [pc, #196]	; (80050c4 <TIM_Base_SetConfig+0xe8>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d007      	beq.n	8005014 <TIM_Base_SetConfig+0x38>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a30      	ldr	r2, [pc, #192]	; (80050c8 <TIM_Base_SetConfig+0xec>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d003      	beq.n	8005014 <TIM_Base_SetConfig+0x38>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a2f      	ldr	r2, [pc, #188]	; (80050cc <TIM_Base_SetConfig+0xf0>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d108      	bne.n	8005026 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a25      	ldr	r2, [pc, #148]	; (80050c0 <TIM_Base_SetConfig+0xe4>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d01b      	beq.n	8005066 <TIM_Base_SetConfig+0x8a>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005034:	d017      	beq.n	8005066 <TIM_Base_SetConfig+0x8a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a22      	ldr	r2, [pc, #136]	; (80050c4 <TIM_Base_SetConfig+0xe8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d013      	beq.n	8005066 <TIM_Base_SetConfig+0x8a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a21      	ldr	r2, [pc, #132]	; (80050c8 <TIM_Base_SetConfig+0xec>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00f      	beq.n	8005066 <TIM_Base_SetConfig+0x8a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a20      	ldr	r2, [pc, #128]	; (80050cc <TIM_Base_SetConfig+0xf0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00b      	beq.n	8005066 <TIM_Base_SetConfig+0x8a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a1f      	ldr	r2, [pc, #124]	; (80050d0 <TIM_Base_SetConfig+0xf4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d007      	beq.n	8005066 <TIM_Base_SetConfig+0x8a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a1e      	ldr	r2, [pc, #120]	; (80050d4 <TIM_Base_SetConfig+0xf8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d003      	beq.n	8005066 <TIM_Base_SetConfig+0x8a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a1d      	ldr	r2, [pc, #116]	; (80050d8 <TIM_Base_SetConfig+0xfc>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d108      	bne.n	8005078 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800506c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	4313      	orrs	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	4313      	orrs	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a08      	ldr	r2, [pc, #32]	; (80050c0 <TIM_Base_SetConfig+0xe4>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d103      	bne.n	80050ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	691a      	ldr	r2, [r3, #16]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	615a      	str	r2, [r3, #20]
}
 80050b2:	bf00      	nop
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	40010000 	.word	0x40010000
 80050c4:	40000400 	.word	0x40000400
 80050c8:	40000800 	.word	0x40000800
 80050cc:	40000c00 	.word	0x40000c00
 80050d0:	40014000 	.word	0x40014000
 80050d4:	40014400 	.word	0x40014400
 80050d8:	40014800 	.word	0x40014800

080050dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	f023 0201 	bic.w	r2, r3, #1
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0303 	bic.w	r3, r3, #3
 8005112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	4313      	orrs	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f023 0302 	bic.w	r3, r3, #2
 8005124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	4313      	orrs	r3, r2
 800512e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a1c      	ldr	r2, [pc, #112]	; (80051a4 <TIM_OC1_SetConfig+0xc8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d10c      	bne.n	8005152 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f023 0308 	bic.w	r3, r3, #8
 800513e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f023 0304 	bic.w	r3, r3, #4
 8005150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a13      	ldr	r2, [pc, #76]	; (80051a4 <TIM_OC1_SetConfig+0xc8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d111      	bne.n	800517e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005160:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005168:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	4313      	orrs	r3, r2
 8005172:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	4313      	orrs	r3, r2
 800517c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	621a      	str	r2, [r3, #32]
}
 8005198:	bf00      	nop
 800519a:	371c      	adds	r7, #28
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	40010000 	.word	0x40010000

080051a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	f023 0210 	bic.w	r2, r3, #16
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	021b      	lsls	r3, r3, #8
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f023 0320 	bic.w	r3, r3, #32
 80051f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a1e      	ldr	r2, [pc, #120]	; (800527c <TIM_OC2_SetConfig+0xd4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d10d      	bne.n	8005224 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800520e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005222:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a15      	ldr	r2, [pc, #84]	; (800527c <TIM_OC2_SetConfig+0xd4>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d113      	bne.n	8005254 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005232:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800523a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	621a      	str	r2, [r3, #32]
}
 800526e:	bf00      	nop
 8005270:	371c      	adds	r7, #28
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40010000 	.word	0x40010000

08005280 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 0303 	bic.w	r3, r3, #3
 80052b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	021b      	lsls	r3, r3, #8
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a1d      	ldr	r2, [pc, #116]	; (8005350 <TIM_OC3_SetConfig+0xd0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d10d      	bne.n	80052fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	021b      	lsls	r3, r3, #8
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a14      	ldr	r2, [pc, #80]	; (8005350 <TIM_OC3_SetConfig+0xd0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d113      	bne.n	800532a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	4313      	orrs	r3, r2
 800531c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	011b      	lsls	r3, r3, #4
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	4313      	orrs	r3, r2
 8005328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	621a      	str	r2, [r3, #32]
}
 8005344:	bf00      	nop
 8005346:	371c      	adds	r7, #28
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr
 8005350:	40010000 	.word	0x40010000

08005354 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005354:	b480      	push	{r7}
 8005356:	b087      	sub	sp, #28
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800538a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	021b      	lsls	r3, r3, #8
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4313      	orrs	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800539e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	031b      	lsls	r3, r3, #12
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a10      	ldr	r2, [pc, #64]	; (80053f0 <TIM_OC4_SetConfig+0x9c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d109      	bne.n	80053c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	019b      	lsls	r3, r3, #6
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	621a      	str	r2, [r3, #32]
}
 80053e2:	bf00      	nop
 80053e4:	371c      	adds	r7, #28
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40010000 	.word	0x40010000

080053f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f023 0201 	bic.w	r2, r3, #1
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800541e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	f023 030a 	bic.w	r3, r3, #10
 8005430:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	4313      	orrs	r3, r2
 8005438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	621a      	str	r2, [r3, #32]
}
 8005446:	bf00      	nop
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005452:	b480      	push	{r7}
 8005454:	b087      	sub	sp, #28
 8005456:	af00      	add	r7, sp, #0
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	f023 0210 	bic.w	r2, r3, #16
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800547c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	031b      	lsls	r3, r3, #12
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	4313      	orrs	r3, r2
 8005486:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800548e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4313      	orrs	r3, r2
 8005498:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	621a      	str	r2, [r3, #32]
}
 80054a6:	bf00      	nop
 80054a8:	371c      	adds	r7, #28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b085      	sub	sp, #20
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f043 0307 	orr.w	r3, r3, #7
 80054d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	609a      	str	r2, [r3, #8]
}
 80054dc:	bf00      	nop
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005502:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	021a      	lsls	r2, r3, #8
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	431a      	orrs	r2, r3
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	4313      	orrs	r3, r2
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	609a      	str	r2, [r3, #8]
}
 800551c:	bf00      	nop
 800551e:	371c      	adds	r7, #28
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005528:	b480      	push	{r7}
 800552a:	b087      	sub	sp, #28
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	f003 031f 	and.w	r3, r3, #31
 800553a:	2201      	movs	r2, #1
 800553c:	fa02 f303 	lsl.w	r3, r2, r3
 8005540:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6a1a      	ldr	r2, [r3, #32]
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	43db      	mvns	r3, r3
 800554a:	401a      	ands	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a1a      	ldr	r2, [r3, #32]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f003 031f 	and.w	r3, r3, #31
 800555a:	6879      	ldr	r1, [r7, #4]
 800555c:	fa01 f303 	lsl.w	r3, r1, r3
 8005560:	431a      	orrs	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	621a      	str	r2, [r3, #32]
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
	...

08005574 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005584:	2b01      	cmp	r3, #1
 8005586:	d101      	bne.n	800558c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005588:	2302      	movs	r3, #2
 800558a:	e050      	b.n	800562e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a1c      	ldr	r2, [pc, #112]	; (800563c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d018      	beq.n	8005602 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d8:	d013      	beq.n	8005602 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a18      	ldr	r2, [pc, #96]	; (8005640 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00e      	beq.n	8005602 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a16      	ldr	r2, [pc, #88]	; (8005644 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d009      	beq.n	8005602 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a15      	ldr	r2, [pc, #84]	; (8005648 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d004      	beq.n	8005602 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a13      	ldr	r2, [pc, #76]	; (800564c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d10c      	bne.n	800561c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005608:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	4313      	orrs	r3, r2
 8005612:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	40010000 	.word	0x40010000
 8005640:	40000400 	.word	0x40000400
 8005644:	40000800 	.word	0x40000800
 8005648:	40000c00 	.word	0x40000c00
 800564c:	40014000 	.word	0x40014000

08005650 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005668:	2302      	movs	r3, #2
 800566a:	e03d      	b.n	80056e8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	4313      	orrs	r3, r2
 8005680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	4313      	orrs	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e03f      	b.n	80057ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d106      	bne.n	8005748 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7fd fe2a 	bl	800339c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2224      	movs	r2, #36	; 0x24
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68da      	ldr	r2, [r3, #12]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800575e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f829 	bl	80057b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	691a      	ldr	r2, [r3, #16]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005774:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695a      	ldr	r2, [r3, #20]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005784:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68da      	ldr	r2, [r3, #12]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005794:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
	...

080057b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057bc:	b0c0      	sub	sp, #256	; 0x100
 80057be:	af00      	add	r7, sp, #0
 80057c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80057d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d4:	68d9      	ldr	r1, [r3, #12]
 80057d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	ea40 0301 	orr.w	r3, r0, r1
 80057e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	431a      	orrs	r2, r3
 80057f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	431a      	orrs	r2, r3
 80057f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	4313      	orrs	r3, r2
 8005800:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005810:	f021 010c 	bic.w	r1, r1, #12
 8005814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800581e:	430b      	orrs	r3, r1
 8005820:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800582e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005832:	6999      	ldr	r1, [r3, #24]
 8005834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	ea40 0301 	orr.w	r3, r0, r1
 800583e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	4b8f      	ldr	r3, [pc, #572]	; (8005a84 <UART_SetConfig+0x2cc>)
 8005848:	429a      	cmp	r2, r3
 800584a:	d005      	beq.n	8005858 <UART_SetConfig+0xa0>
 800584c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	4b8d      	ldr	r3, [pc, #564]	; (8005a88 <UART_SetConfig+0x2d0>)
 8005854:	429a      	cmp	r2, r3
 8005856:	d104      	bne.n	8005862 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005858:	f7fe fe0c 	bl	8004474 <HAL_RCC_GetPCLK2Freq>
 800585c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005860:	e003      	b.n	800586a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005862:	f7fe fdf3 	bl	800444c <HAL_RCC_GetPCLK1Freq>
 8005866:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800586a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005874:	f040 810c 	bne.w	8005a90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800587c:	2200      	movs	r2, #0
 800587e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005882:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005886:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800588a:	4622      	mov	r2, r4
 800588c:	462b      	mov	r3, r5
 800588e:	1891      	adds	r1, r2, r2
 8005890:	65b9      	str	r1, [r7, #88]	; 0x58
 8005892:	415b      	adcs	r3, r3
 8005894:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005896:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800589a:	4621      	mov	r1, r4
 800589c:	eb12 0801 	adds.w	r8, r2, r1
 80058a0:	4629      	mov	r1, r5
 80058a2:	eb43 0901 	adc.w	r9, r3, r1
 80058a6:	f04f 0200 	mov.w	r2, #0
 80058aa:	f04f 0300 	mov.w	r3, #0
 80058ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058ba:	4690      	mov	r8, r2
 80058bc:	4699      	mov	r9, r3
 80058be:	4623      	mov	r3, r4
 80058c0:	eb18 0303 	adds.w	r3, r8, r3
 80058c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80058c8:	462b      	mov	r3, r5
 80058ca:	eb49 0303 	adc.w	r3, r9, r3
 80058ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80058e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80058e6:	460b      	mov	r3, r1
 80058e8:	18db      	adds	r3, r3, r3
 80058ea:	653b      	str	r3, [r7, #80]	; 0x50
 80058ec:	4613      	mov	r3, r2
 80058ee:	eb42 0303 	adc.w	r3, r2, r3
 80058f2:	657b      	str	r3, [r7, #84]	; 0x54
 80058f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80058f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80058fc:	f7fb f88a 	bl	8000a14 <__aeabi_uldivmod>
 8005900:	4602      	mov	r2, r0
 8005902:	460b      	mov	r3, r1
 8005904:	4b61      	ldr	r3, [pc, #388]	; (8005a8c <UART_SetConfig+0x2d4>)
 8005906:	fba3 2302 	umull	r2, r3, r3, r2
 800590a:	095b      	lsrs	r3, r3, #5
 800590c:	011c      	lsls	r4, r3, #4
 800590e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005912:	2200      	movs	r2, #0
 8005914:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005918:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800591c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005920:	4642      	mov	r2, r8
 8005922:	464b      	mov	r3, r9
 8005924:	1891      	adds	r1, r2, r2
 8005926:	64b9      	str	r1, [r7, #72]	; 0x48
 8005928:	415b      	adcs	r3, r3
 800592a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800592c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005930:	4641      	mov	r1, r8
 8005932:	eb12 0a01 	adds.w	sl, r2, r1
 8005936:	4649      	mov	r1, r9
 8005938:	eb43 0b01 	adc.w	fp, r3, r1
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005948:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800594c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005950:	4692      	mov	sl, r2
 8005952:	469b      	mov	fp, r3
 8005954:	4643      	mov	r3, r8
 8005956:	eb1a 0303 	adds.w	r3, sl, r3
 800595a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800595e:	464b      	mov	r3, r9
 8005960:	eb4b 0303 	adc.w	r3, fp, r3
 8005964:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005974:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005978:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800597c:	460b      	mov	r3, r1
 800597e:	18db      	adds	r3, r3, r3
 8005980:	643b      	str	r3, [r7, #64]	; 0x40
 8005982:	4613      	mov	r3, r2
 8005984:	eb42 0303 	adc.w	r3, r2, r3
 8005988:	647b      	str	r3, [r7, #68]	; 0x44
 800598a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800598e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005992:	f7fb f83f 	bl	8000a14 <__aeabi_uldivmod>
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	4611      	mov	r1, r2
 800599c:	4b3b      	ldr	r3, [pc, #236]	; (8005a8c <UART_SetConfig+0x2d4>)
 800599e:	fba3 2301 	umull	r2, r3, r3, r1
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	2264      	movs	r2, #100	; 0x64
 80059a6:	fb02 f303 	mul.w	r3, r2, r3
 80059aa:	1acb      	subs	r3, r1, r3
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80059b2:	4b36      	ldr	r3, [pc, #216]	; (8005a8c <UART_SetConfig+0x2d4>)
 80059b4:	fba3 2302 	umull	r2, r3, r3, r2
 80059b8:	095b      	lsrs	r3, r3, #5
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059c0:	441c      	add	r4, r3
 80059c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059c6:	2200      	movs	r2, #0
 80059c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80059d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80059d4:	4642      	mov	r2, r8
 80059d6:	464b      	mov	r3, r9
 80059d8:	1891      	adds	r1, r2, r2
 80059da:	63b9      	str	r1, [r7, #56]	; 0x38
 80059dc:	415b      	adcs	r3, r3
 80059de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059e4:	4641      	mov	r1, r8
 80059e6:	1851      	adds	r1, r2, r1
 80059e8:	6339      	str	r1, [r7, #48]	; 0x30
 80059ea:	4649      	mov	r1, r9
 80059ec:	414b      	adcs	r3, r1
 80059ee:	637b      	str	r3, [r7, #52]	; 0x34
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	f04f 0300 	mov.w	r3, #0
 80059f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80059fc:	4659      	mov	r1, fp
 80059fe:	00cb      	lsls	r3, r1, #3
 8005a00:	4651      	mov	r1, sl
 8005a02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a06:	4651      	mov	r1, sl
 8005a08:	00ca      	lsls	r2, r1, #3
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	4603      	mov	r3, r0
 8005a10:	4642      	mov	r2, r8
 8005a12:	189b      	adds	r3, r3, r2
 8005a14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a18:	464b      	mov	r3, r9
 8005a1a:	460a      	mov	r2, r1
 8005a1c:	eb42 0303 	adc.w	r3, r2, r3
 8005a20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a30:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a38:	460b      	mov	r3, r1
 8005a3a:	18db      	adds	r3, r3, r3
 8005a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a3e:	4613      	mov	r3, r2
 8005a40:	eb42 0303 	adc.w	r3, r2, r3
 8005a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a4e:	f7fa ffe1 	bl	8000a14 <__aeabi_uldivmod>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	4b0d      	ldr	r3, [pc, #52]	; (8005a8c <UART_SetConfig+0x2d4>)
 8005a58:	fba3 1302 	umull	r1, r3, r3, r2
 8005a5c:	095b      	lsrs	r3, r3, #5
 8005a5e:	2164      	movs	r1, #100	; 0x64
 8005a60:	fb01 f303 	mul.w	r3, r1, r3
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	3332      	adds	r3, #50	; 0x32
 8005a6a:	4a08      	ldr	r2, [pc, #32]	; (8005a8c <UART_SetConfig+0x2d4>)
 8005a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a70:	095b      	lsrs	r3, r3, #5
 8005a72:	f003 0207 	and.w	r2, r3, #7
 8005a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4422      	add	r2, r4
 8005a7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a80:	e105      	b.n	8005c8e <UART_SetConfig+0x4d6>
 8005a82:	bf00      	nop
 8005a84:	40011000 	.word	0x40011000
 8005a88:	40011400 	.word	0x40011400
 8005a8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a94:	2200      	movs	r2, #0
 8005a96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a9a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005aa2:	4642      	mov	r2, r8
 8005aa4:	464b      	mov	r3, r9
 8005aa6:	1891      	adds	r1, r2, r2
 8005aa8:	6239      	str	r1, [r7, #32]
 8005aaa:	415b      	adcs	r3, r3
 8005aac:	627b      	str	r3, [r7, #36]	; 0x24
 8005aae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ab2:	4641      	mov	r1, r8
 8005ab4:	1854      	adds	r4, r2, r1
 8005ab6:	4649      	mov	r1, r9
 8005ab8:	eb43 0501 	adc.w	r5, r3, r1
 8005abc:	f04f 0200 	mov.w	r2, #0
 8005ac0:	f04f 0300 	mov.w	r3, #0
 8005ac4:	00eb      	lsls	r3, r5, #3
 8005ac6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005aca:	00e2      	lsls	r2, r4, #3
 8005acc:	4614      	mov	r4, r2
 8005ace:	461d      	mov	r5, r3
 8005ad0:	4643      	mov	r3, r8
 8005ad2:	18e3      	adds	r3, r4, r3
 8005ad4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ad8:	464b      	mov	r3, r9
 8005ada:	eb45 0303 	adc.w	r3, r5, r3
 8005ade:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005aee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005af2:	f04f 0200 	mov.w	r2, #0
 8005af6:	f04f 0300 	mov.w	r3, #0
 8005afa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005afe:	4629      	mov	r1, r5
 8005b00:	008b      	lsls	r3, r1, #2
 8005b02:	4621      	mov	r1, r4
 8005b04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b08:	4621      	mov	r1, r4
 8005b0a:	008a      	lsls	r2, r1, #2
 8005b0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b10:	f7fa ff80 	bl	8000a14 <__aeabi_uldivmod>
 8005b14:	4602      	mov	r2, r0
 8005b16:	460b      	mov	r3, r1
 8005b18:	4b60      	ldr	r3, [pc, #384]	; (8005c9c <UART_SetConfig+0x4e4>)
 8005b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b1e:	095b      	lsrs	r3, r3, #5
 8005b20:	011c      	lsls	r4, r3, #4
 8005b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b26:	2200      	movs	r2, #0
 8005b28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b34:	4642      	mov	r2, r8
 8005b36:	464b      	mov	r3, r9
 8005b38:	1891      	adds	r1, r2, r2
 8005b3a:	61b9      	str	r1, [r7, #24]
 8005b3c:	415b      	adcs	r3, r3
 8005b3e:	61fb      	str	r3, [r7, #28]
 8005b40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b44:	4641      	mov	r1, r8
 8005b46:	1851      	adds	r1, r2, r1
 8005b48:	6139      	str	r1, [r7, #16]
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	414b      	adcs	r3, r1
 8005b4e:	617b      	str	r3, [r7, #20]
 8005b50:	f04f 0200 	mov.w	r2, #0
 8005b54:	f04f 0300 	mov.w	r3, #0
 8005b58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b5c:	4659      	mov	r1, fp
 8005b5e:	00cb      	lsls	r3, r1, #3
 8005b60:	4651      	mov	r1, sl
 8005b62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b66:	4651      	mov	r1, sl
 8005b68:	00ca      	lsls	r2, r1, #3
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	4603      	mov	r3, r0
 8005b70:	4642      	mov	r2, r8
 8005b72:	189b      	adds	r3, r3, r2
 8005b74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b78:	464b      	mov	r3, r9
 8005b7a:	460a      	mov	r2, r1
 8005b7c:	eb42 0303 	adc.w	r3, r2, r3
 8005b80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b90:	f04f 0200 	mov.w	r2, #0
 8005b94:	f04f 0300 	mov.w	r3, #0
 8005b98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005b9c:	4649      	mov	r1, r9
 8005b9e:	008b      	lsls	r3, r1, #2
 8005ba0:	4641      	mov	r1, r8
 8005ba2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ba6:	4641      	mov	r1, r8
 8005ba8:	008a      	lsls	r2, r1, #2
 8005baa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005bae:	f7fa ff31 	bl	8000a14 <__aeabi_uldivmod>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	4b39      	ldr	r3, [pc, #228]	; (8005c9c <UART_SetConfig+0x4e4>)
 8005bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bbc:	095b      	lsrs	r3, r3, #5
 8005bbe:	2164      	movs	r1, #100	; 0x64
 8005bc0:	fb01 f303 	mul.w	r3, r1, r3
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	011b      	lsls	r3, r3, #4
 8005bc8:	3332      	adds	r3, #50	; 0x32
 8005bca:	4a34      	ldr	r2, [pc, #208]	; (8005c9c <UART_SetConfig+0x4e4>)
 8005bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd0:	095b      	lsrs	r3, r3, #5
 8005bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bd6:	441c      	add	r4, r3
 8005bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bdc:	2200      	movs	r2, #0
 8005bde:	673b      	str	r3, [r7, #112]	; 0x70
 8005be0:	677a      	str	r2, [r7, #116]	; 0x74
 8005be2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005be6:	4642      	mov	r2, r8
 8005be8:	464b      	mov	r3, r9
 8005bea:	1891      	adds	r1, r2, r2
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	415b      	adcs	r3, r3
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bf6:	4641      	mov	r1, r8
 8005bf8:	1851      	adds	r1, r2, r1
 8005bfa:	6039      	str	r1, [r7, #0]
 8005bfc:	4649      	mov	r1, r9
 8005bfe:	414b      	adcs	r3, r1
 8005c00:	607b      	str	r3, [r7, #4]
 8005c02:	f04f 0200 	mov.w	r2, #0
 8005c06:	f04f 0300 	mov.w	r3, #0
 8005c0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c0e:	4659      	mov	r1, fp
 8005c10:	00cb      	lsls	r3, r1, #3
 8005c12:	4651      	mov	r1, sl
 8005c14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c18:	4651      	mov	r1, sl
 8005c1a:	00ca      	lsls	r2, r1, #3
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	4619      	mov	r1, r3
 8005c20:	4603      	mov	r3, r0
 8005c22:	4642      	mov	r2, r8
 8005c24:	189b      	adds	r3, r3, r2
 8005c26:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c28:	464b      	mov	r3, r9
 8005c2a:	460a      	mov	r2, r1
 8005c2c:	eb42 0303 	adc.w	r3, r2, r3
 8005c30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	663b      	str	r3, [r7, #96]	; 0x60
 8005c3c:	667a      	str	r2, [r7, #100]	; 0x64
 8005c3e:	f04f 0200 	mov.w	r2, #0
 8005c42:	f04f 0300 	mov.w	r3, #0
 8005c46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c4a:	4649      	mov	r1, r9
 8005c4c:	008b      	lsls	r3, r1, #2
 8005c4e:	4641      	mov	r1, r8
 8005c50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c54:	4641      	mov	r1, r8
 8005c56:	008a      	lsls	r2, r1, #2
 8005c58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c5c:	f7fa feda 	bl	8000a14 <__aeabi_uldivmod>
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4b0d      	ldr	r3, [pc, #52]	; (8005c9c <UART_SetConfig+0x4e4>)
 8005c66:	fba3 1302 	umull	r1, r3, r3, r2
 8005c6a:	095b      	lsrs	r3, r3, #5
 8005c6c:	2164      	movs	r1, #100	; 0x64
 8005c6e:	fb01 f303 	mul.w	r3, r1, r3
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	011b      	lsls	r3, r3, #4
 8005c76:	3332      	adds	r3, #50	; 0x32
 8005c78:	4a08      	ldr	r2, [pc, #32]	; (8005c9c <UART_SetConfig+0x4e4>)
 8005c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7e:	095b      	lsrs	r3, r3, #5
 8005c80:	f003 020f 	and.w	r2, r3, #15
 8005c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4422      	add	r2, r4
 8005c8c:	609a      	str	r2, [r3, #8]
}
 8005c8e:	bf00      	nop
 8005c90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c94:	46bd      	mov	sp, r7
 8005c96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c9a:	bf00      	nop
 8005c9c:	51eb851f 	.word	0x51eb851f

08005ca0 <arm_mat_trans_f32>:
 8005ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca4:	8802      	ldrh	r2, [r0, #0]
 8005ca6:	884b      	ldrh	r3, [r1, #2]
 8005ca8:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8005cac:	684f      	ldr	r7, [r1, #4]
 8005cae:	8840      	ldrh	r0, [r0, #2]
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	d14c      	bne.n	8005d50 <arm_mat_trans_f32+0xb0>
 8005cb6:	f8b1 e000 	ldrh.w	lr, [r1]
 8005cba:	4586      	cmp	lr, r0
 8005cbc:	d148      	bne.n	8005d50 <arm_mat_trans_f32+0xb0>
 8005cbe:	ea4f 089e 	mov.w	r8, lr, lsr #2
 8005cc2:	009c      	lsls	r4, r3, #2
 8005cc4:	f00e 0e03 	and.w	lr, lr, #3
 8005cc8:	fb08 f904 	mul.w	r9, r8, r4
 8005ccc:	ea4f 028e 	mov.w	r2, lr, lsl #2
 8005cd0:	011d      	lsls	r5, r3, #4
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8005cd8:	eb07 0a04 	add.w	sl, r7, r4
 8005cdc:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8005ce0:	9201      	str	r2, [sp, #4]
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	463b      	mov	r3, r7
 8005ce6:	f1b8 0f00 	cmp.w	r8, #0
 8005cea:	d01d      	beq.n	8005d28 <arm_mat_trans_f32+0x88>
 8005cec:	9900      	ldr	r1, [sp, #0]
 8005cee:	f10c 0210 	add.w	r2, ip, #16
 8005cf2:	4439      	add	r1, r7
 8005cf4:	4640      	mov	r0, r8
 8005cf6:	f852 6c10 	ldr.w	r6, [r2, #-16]
 8005cfa:	601e      	str	r6, [r3, #0]
 8005cfc:	ed52 7a03 	vldr	s15, [r2, #-12]
 8005d00:	191e      	adds	r6, r3, r4
 8005d02:	edc6 7a00 	vstr	s15, [r6]
 8005d06:	f852 6c08 	ldr.w	r6, [r2, #-8]
 8005d0a:	600e      	str	r6, [r1, #0]
 8005d0c:	ed52 7a01 	vldr	s15, [r2, #-4]
 8005d10:	190e      	adds	r6, r1, r4
 8005d12:	3801      	subs	r0, #1
 8005d14:	442b      	add	r3, r5
 8005d16:	f102 0210 	add.w	r2, r2, #16
 8005d1a:	edc6 7a00 	vstr	s15, [r6]
 8005d1e:	4429      	add	r1, r5
 8005d20:	d1e9      	bne.n	8005cf6 <arm_mat_trans_f32+0x56>
 8005d22:	44dc      	add	ip, fp
 8005d24:	eb09 0307 	add.w	r3, r9, r7
 8005d28:	f1be 0f00 	cmp.w	lr, #0
 8005d2c:	d009      	beq.n	8005d42 <arm_mat_trans_f32+0xa2>
 8005d2e:	4672      	mov	r2, lr
 8005d30:	4661      	mov	r1, ip
 8005d32:	f851 0b04 	ldr.w	r0, [r1], #4
 8005d36:	6018      	str	r0, [r3, #0]
 8005d38:	3a01      	subs	r2, #1
 8005d3a:	4423      	add	r3, r4
 8005d3c:	d1f9      	bne.n	8005d32 <arm_mat_trans_f32+0x92>
 8005d3e:	9b01      	ldr	r3, [sp, #4]
 8005d40:	449c      	add	ip, r3
 8005d42:	3704      	adds	r7, #4
 8005d44:	4557      	cmp	r7, sl
 8005d46:	d1cd      	bne.n	8005ce4 <arm_mat_trans_f32+0x44>
 8005d48:	2000      	movs	r0, #0
 8005d4a:	b003      	add	sp, #12
 8005d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d50:	f06f 0002 	mvn.w	r0, #2
 8005d54:	e7f9      	b.n	8005d4a <arm_mat_trans_f32+0xaa>
 8005d56:	bf00      	nop

08005d58 <arm_mat_sub_f32>:
 8005d58:	b4f0      	push	{r4, r5, r6, r7}
 8005d5a:	e9d1 4700 	ldrd	r4, r7, [r1]
 8005d5e:	6803      	ldr	r3, [r0, #0]
 8005d60:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8005d64:	6856      	ldr	r6, [r2, #4]
 8005d66:	42a3      	cmp	r3, r4
 8005d68:	d15d      	bne.n	8005e26 <arm_mat_sub_f32+0xce>
 8005d6a:	6812      	ldr	r2, [r2, #0]
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d15a      	bne.n	8005e26 <arm_mat_sub_f32+0xce>
 8005d70:	8803      	ldrh	r3, [r0, #0]
 8005d72:	8844      	ldrh	r4, [r0, #2]
 8005d74:	fb04 f403 	mul.w	r4, r4, r3
 8005d78:	08a5      	lsrs	r5, r4, #2
 8005d7a:	d032      	beq.n	8005de2 <arm_mat_sub_f32+0x8a>
 8005d7c:	f10c 0110 	add.w	r1, ip, #16
 8005d80:	f107 0210 	add.w	r2, r7, #16
 8005d84:	f106 0310 	add.w	r3, r6, #16
 8005d88:	4628      	mov	r0, r5
 8005d8a:	ed12 7a04 	vldr	s14, [r2, #-16]
 8005d8e:	ed51 7a04 	vldr	s15, [r1, #-16]
 8005d92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d96:	3801      	subs	r0, #1
 8005d98:	ed43 7a04 	vstr	s15, [r3, #-16]
 8005d9c:	ed12 7a03 	vldr	s14, [r2, #-12]
 8005da0:	ed51 7a03 	vldr	s15, [r1, #-12]
 8005da4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005da8:	f101 0110 	add.w	r1, r1, #16
 8005dac:	ed43 7a03 	vstr	s15, [r3, #-12]
 8005db0:	ed12 7a02 	vldr	s14, [r2, #-8]
 8005db4:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 8005db8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005dbc:	f102 0210 	add.w	r2, r2, #16
 8005dc0:	ed43 7a02 	vstr	s15, [r3, #-8]
 8005dc4:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 8005dc8:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8005dcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005dd0:	f103 0310 	add.w	r3, r3, #16
 8005dd4:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8005dd8:	d1d7      	bne.n	8005d8a <arm_mat_sub_f32+0x32>
 8005dda:	012b      	lsls	r3, r5, #4
 8005ddc:	449c      	add	ip, r3
 8005dde:	441f      	add	r7, r3
 8005de0:	441e      	add	r6, r3
 8005de2:	f014 0403 	ands.w	r4, r4, #3
 8005de6:	d01b      	beq.n	8005e20 <arm_mat_sub_f32+0xc8>
 8005de8:	eddc 7a00 	vldr	s15, [ip]
 8005dec:	ed97 7a00 	vldr	s14, [r7]
 8005df0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005df4:	3c01      	subs	r4, #1
 8005df6:	edc6 7a00 	vstr	s15, [r6]
 8005dfa:	d011      	beq.n	8005e20 <arm_mat_sub_f32+0xc8>
 8005dfc:	eddc 7a01 	vldr	s15, [ip, #4]
 8005e00:	ed97 7a01 	vldr	s14, [r7, #4]
 8005e04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e08:	2c01      	cmp	r4, #1
 8005e0a:	edc6 7a01 	vstr	s15, [r6, #4]
 8005e0e:	d007      	beq.n	8005e20 <arm_mat_sub_f32+0xc8>
 8005e10:	eddc 7a02 	vldr	s15, [ip, #8]
 8005e14:	ed97 7a02 	vldr	s14, [r7, #8]
 8005e18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e1c:	edc6 7a02 	vstr	s15, [r6, #8]
 8005e20:	2000      	movs	r0, #0
 8005e22:	bcf0      	pop	{r4, r5, r6, r7}
 8005e24:	4770      	bx	lr
 8005e26:	f06f 0002 	mvn.w	r0, #2
 8005e2a:	e7fa      	b.n	8005e22 <arm_mat_sub_f32+0xca>

08005e2c <arm_mat_mult_f32>:
 8005e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e30:	8845      	ldrh	r5, [r0, #2]
 8005e32:	880b      	ldrh	r3, [r1, #0]
 8005e34:	8806      	ldrh	r6, [r0, #0]
 8005e36:	6847      	ldr	r7, [r0, #4]
 8005e38:	6854      	ldr	r4, [r2, #4]
 8005e3a:	6848      	ldr	r0, [r1, #4]
 8005e3c:	b08b      	sub	sp, #44	; 0x2c
 8005e3e:	42ab      	cmp	r3, r5
 8005e40:	9109      	str	r1, [sp, #36]	; 0x24
 8005e42:	9604      	str	r6, [sp, #16]
 8005e44:	8849      	ldrh	r1, [r1, #2]
 8005e46:	f040 808a 	bne.w	8005f5e <arm_mat_mult_f32+0x132>
 8005e4a:	8815      	ldrh	r5, [r2, #0]
 8005e4c:	42b5      	cmp	r5, r6
 8005e4e:	f040 8086 	bne.w	8005f5e <arm_mat_mult_f32+0x132>
 8005e52:	8852      	ldrh	r2, [r2, #2]
 8005e54:	428a      	cmp	r2, r1
 8005e56:	f040 8082 	bne.w	8005f5e <arm_mat_mult_f32+0x132>
 8005e5a:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8005e5e:	1d01      	adds	r1, r0, #4
 8005e60:	0116      	lsls	r6, r2, #4
 8005e62:	9108      	str	r1, [sp, #32]
 8005e64:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8005e68:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8005e6c:	9101      	str	r1, [sp, #4]
 8005e6e:	fb06 f108 	mul.w	r1, r6, r8
 8005e72:	0095      	lsls	r5, r2, #2
 8005e74:	9103      	str	r1, [sp, #12]
 8005e76:	00d2      	lsls	r2, r2, #3
 8005e78:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8005e7c:	f003 0903 	and.w	r9, r3, #3
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	f107 0b10 	add.w	fp, r7, #16
 8005e86:	eb04 0a05 	add.w	sl, r4, r5
 8005e8a:	9107      	str	r1, [sp, #28]
 8005e8c:	9202      	str	r2, [sp, #8]
 8005e8e:	9306      	str	r3, [sp, #24]
 8005e90:	f1ab 0310 	sub.w	r3, fp, #16
 8005e94:	9305      	str	r3, [sp, #20]
 8005e96:	9b07      	ldr	r3, [sp, #28]
 8005e98:	f8dd e020 	ldr.w	lr, [sp, #32]
 8005e9c:	eb03 0c0a 	add.w	ip, r3, sl
 8005ea0:	eddf 7a31 	vldr	s15, [pc, #196]	; 8005f68 <arm_mat_mult_f32+0x13c>
 8005ea4:	f1b8 0f00 	cmp.w	r8, #0
 8005ea8:	d053      	beq.n	8005f52 <arm_mat_mult_f32+0x126>
 8005eaa:	9b02      	ldr	r3, [sp, #8]
 8005eac:	4644      	mov	r4, r8
 8005eae:	18c1      	adds	r1, r0, r3
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	465b      	mov	r3, fp
 8005eb4:	ed92 6a00 	vldr	s12, [r2]
 8005eb8:	ed13 7a04 	vldr	s14, [r3, #-16]
 8005ebc:	ed53 4a03 	vldr	s9, [r3, #-12]
 8005ec0:	ed53 6a02 	vldr	s13, [r3, #-8]
 8005ec4:	ed91 5a00 	vldr	s10, [r1]
 8005ec8:	ed53 5a01 	vldr	s11, [r3, #-4]
 8005ecc:	1957      	adds	r7, r2, r5
 8005ece:	ee27 7a06 	vmul.f32	s14, s14, s12
 8005ed2:	ed97 6a00 	vldr	s12, [r7]
 8005ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005eda:	ee26 6a24 	vmul.f32	s12, s12, s9
 8005ede:	194f      	adds	r7, r1, r5
 8005ee0:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005ee4:	ee26 7a85 	vmul.f32	s14, s13, s10
 8005ee8:	edd7 7a00 	vldr	s15, [r7]
 8005eec:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005ef0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005ef4:	3c01      	subs	r4, #1
 8005ef6:	4432      	add	r2, r6
 8005ef8:	4431      	add	r1, r6
 8005efa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005efe:	f103 0310 	add.w	r3, r3, #16
 8005f02:	d1d7      	bne.n	8005eb4 <arm_mat_mult_f32+0x88>
 8005f04:	9b03      	ldr	r3, [sp, #12]
 8005f06:	9a01      	ldr	r2, [sp, #4]
 8005f08:	4418      	add	r0, r3
 8005f0a:	f1b9 0f00 	cmp.w	r9, #0
 8005f0e:	d00b      	beq.n	8005f28 <arm_mat_mult_f32+0xfc>
 8005f10:	464b      	mov	r3, r9
 8005f12:	edd0 6a00 	vldr	s13, [r0]
 8005f16:	ecb2 7a01 	vldmia	r2!, {s14}
 8005f1a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	4428      	add	r0, r5
 8005f22:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f26:	d1f4      	bne.n	8005f12 <arm_mat_mult_f32+0xe6>
 8005f28:	ecec 7a01 	vstmia	ip!, {s15}
 8005f2c:	45d4      	cmp	ip, sl
 8005f2e:	4670      	mov	r0, lr
 8005f30:	f10e 0e04 	add.w	lr, lr, #4
 8005f34:	d1b4      	bne.n	8005ea0 <arm_mat_mult_f32+0x74>
 8005f36:	9a01      	ldr	r2, [sp, #4]
 8005f38:	9b06      	ldr	r3, [sp, #24]
 8005f3a:	4611      	mov	r1, r2
 8005f3c:	4419      	add	r1, r3
 8005f3e:	449b      	add	fp, r3
 8005f40:	9b04      	ldr	r3, [sp, #16]
 8005f42:	9101      	str	r1, [sp, #4]
 8005f44:	3b01      	subs	r3, #1
 8005f46:	44aa      	add	sl, r5
 8005f48:	9304      	str	r3, [sp, #16]
 8005f4a:	d004      	beq.n	8005f56 <arm_mat_mult_f32+0x12a>
 8005f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f4e:	6858      	ldr	r0, [r3, #4]
 8005f50:	e79e      	b.n	8005e90 <arm_mat_mult_f32+0x64>
 8005f52:	9a05      	ldr	r2, [sp, #20]
 8005f54:	e7d9      	b.n	8005f0a <arm_mat_mult_f32+0xde>
 8005f56:	4618      	mov	r0, r3
 8005f58:	b00b      	add	sp, #44	; 0x2c
 8005f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f5e:	f06f 0002 	mvn.w	r0, #2
 8005f62:	b00b      	add	sp, #44	; 0x2c
 8005f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f68:	00000000 	.word	0x00000000

08005f6c <arm_mat_inverse_f32>:
 8005f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f70:	8843      	ldrh	r3, [r0, #2]
 8005f72:	8804      	ldrh	r4, [r0, #0]
 8005f74:	684e      	ldr	r6, [r1, #4]
 8005f76:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	429c      	cmp	r4, r3
 8005f7e:	9301      	str	r3, [sp, #4]
 8005f80:	9603      	str	r6, [sp, #12]
 8005f82:	f040 80ea 	bne.w	800615a <arm_mat_inverse_f32+0x1ee>
 8005f86:	880a      	ldrh	r2, [r1, #0]
 8005f88:	884b      	ldrh	r3, [r1, #2]
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	f040 80e5 	bne.w	800615a <arm_mat_inverse_f32+0x1ee>
 8005f90:	429c      	cmp	r4, r3
 8005f92:	f040 80e2 	bne.w	800615a <arm_mat_inverse_f32+0x1ee>
 8005f96:	9005      	str	r0, [sp, #20]
 8005f98:	b30c      	cbz	r4, 8005fde <arm_mat_inverse_f32+0x72>
 8005f9a:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 8005f9e:	1e67      	subs	r7, r4, #1
 8005fa0:	f846 bb04 	str.w	fp, [r6], #4
 8005fa4:	d01b      	beq.n	8005fde <arm_mat_inverse_f32+0x72>
 8005fa6:	f04f 0801 	mov.w	r8, #1
 8005faa:	00ba      	lsls	r2, r7, #2
 8005fac:	eb06 0a02 	add.w	sl, r6, r2
 8005fb0:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	f000 f970 	bl	800629c <memset>
 8005fbc:	eb0a 0605 	add.w	r6, sl, r5
 8005fc0:	462a      	mov	r2, r5
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	4650      	mov	r0, sl
 8005fc6:	f1b8 0f00 	cmp.w	r8, #0
 8005fca:	f000 80cb 	beq.w	8006164 <arm_mat_inverse_f32+0x1f8>
 8005fce:	f000 f965 	bl	800629c <memset>
 8005fd2:	3f01      	subs	r7, #1
 8005fd4:	f108 0801 	add.w	r8, r8, #1
 8005fd8:	f846 bb04 	str.w	fp, [r6], #4
 8005fdc:	d1e5      	bne.n	8005faa <arm_mat_inverse_f32+0x3e>
 8005fde:	9b01      	ldr	r3, [sp, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 80b5 	beq.w	8006150 <arm_mat_inverse_f32+0x1e4>
 8005fe6:	009d      	lsls	r5, r3, #2
 8005fe8:	eb09 0205 	add.w	r2, r9, r5
 8005fec:	46cc      	mov	ip, r9
 8005fee:	9202      	str	r2, [sp, #8]
 8005ff0:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005ff4:	1d2a      	adds	r2, r5, #4
 8005ff6:	9204      	str	r2, [sp, #16]
 8005ff8:	462f      	mov	r7, r5
 8005ffa:	469e      	mov	lr, r3
 8005ffc:	2600      	movs	r6, #0
 8005ffe:	9b02      	ldr	r3, [sp, #8]
 8006000:	eddc 6a00 	vldr	s13, [ip]
 8006004:	42b4      	cmp	r4, r6
 8006006:	eba3 0b07 	sub.w	fp, r3, r7
 800600a:	f000 80a1 	beq.w	8006150 <arm_mat_inverse_f32+0x1e4>
 800600e:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8006174 <arm_mat_inverse_f32+0x208>
 8006012:	4632      	mov	r2, r6
 8006014:	4663      	mov	r3, ip
 8006016:	e00b      	b.n	8006030 <arm_mat_inverse_f32+0xc4>
 8006018:	eef4 7a47 	vcmp.f32	s15, s14
 800601c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006020:	f102 0201 	add.w	r2, r2, #1
 8006024:	bfc8      	it	gt
 8006026:	eeb0 7a67 	vmovgt.f32	s14, s15
 800602a:	42a2      	cmp	r2, r4
 800602c:	442b      	add	r3, r5
 800602e:	d014      	beq.n	800605a <arm_mat_inverse_f32+0xee>
 8006030:	edd3 7a00 	vldr	s15, [r3]
 8006034:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800603c:	eeb1 6a67 	vneg.f32	s12, s15
 8006040:	dcea      	bgt.n	8006018 <arm_mat_inverse_f32+0xac>
 8006042:	eeb4 6a47 	vcmp.f32	s12, s14
 8006046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800604a:	f102 0201 	add.w	r2, r2, #1
 800604e:	bfc8      	it	gt
 8006050:	eeb0 7a46 	vmovgt.f32	s14, s12
 8006054:	42a2      	cmp	r2, r4
 8006056:	442b      	add	r3, r5
 8006058:	d1ea      	bne.n	8006030 <arm_mat_inverse_f32+0xc4>
 800605a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800605e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006062:	d075      	beq.n	8006150 <arm_mat_inverse_f32+0x1e4>
 8006064:	eef5 6a40 	vcmp.f32	s13, #0.0
 8006068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800606c:	d070      	beq.n	8006150 <arm_mat_inverse_f32+0x1e4>
 800606e:	4672      	mov	r2, lr
 8006070:	4663      	mov	r3, ip
 8006072:	ed93 7a00 	vldr	s14, [r3]
 8006076:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800607a:	3a01      	subs	r2, #1
 800607c:	ece3 7a01 	vstmia	r3!, {s15}
 8006080:	d1f7      	bne.n	8006072 <arm_mat_inverse_f32+0x106>
 8006082:	9901      	ldr	r1, [sp, #4]
 8006084:	464b      	mov	r3, r9
 8006086:	ed93 7a00 	vldr	s14, [r3]
 800608a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800608e:	3901      	subs	r1, #1
 8006090:	ece3 7a01 	vstmia	r3!, {s15}
 8006094:	d1f7      	bne.n	8006086 <arm_mat_inverse_f32+0x11a>
 8006096:	9803      	ldr	r0, [sp, #12]
 8006098:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800609c:	42b1      	cmp	r1, r6
 800609e:	d039      	beq.n	8006114 <arm_mat_inverse_f32+0x1a8>
 80060a0:	eddb 6a00 	vldr	s13, [fp]
 80060a4:	465a      	mov	r2, fp
 80060a6:	4673      	mov	r3, lr
 80060a8:	46e2      	mov	sl, ip
 80060aa:	ecba 7a01 	vldmia	sl!, {s14}
 80060ae:	edd2 7a00 	vldr	s15, [r2]
 80060b2:	ee26 7a87 	vmul.f32	s14, s13, s14
 80060b6:	3b01      	subs	r3, #1
 80060b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80060bc:	ece2 7a01 	vstmia	r2!, {s15}
 80060c0:	d1f3      	bne.n	80060aa <arm_mat_inverse_f32+0x13e>
 80060c2:	9b01      	ldr	r3, [sp, #4]
 80060c4:	44bb      	add	fp, r7
 80060c6:	4602      	mov	r2, r0
 80060c8:	46ca      	mov	sl, r9
 80060ca:	ecba 7a01 	vldmia	sl!, {s14}
 80060ce:	edd2 7a00 	vldr	s15, [r2]
 80060d2:	ee26 7a87 	vmul.f32	s14, s13, s14
 80060d6:	3b01      	subs	r3, #1
 80060d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80060dc:	ece2 7a01 	vstmia	r2!, {s15}
 80060e0:	d1f3      	bne.n	80060ca <arm_mat_inverse_f32+0x15e>
 80060e2:	4428      	add	r0, r5
 80060e4:	3101      	adds	r1, #1
 80060e6:	428c      	cmp	r4, r1
 80060e8:	44c3      	add	fp, r8
 80060ea:	d1d7      	bne.n	800609c <arm_mat_inverse_f32+0x130>
 80060ec:	9b04      	ldr	r3, [sp, #16]
 80060ee:	f1be 0e01 	subs.w	lr, lr, #1
 80060f2:	f106 0601 	add.w	r6, r6, #1
 80060f6:	449c      	add	ip, r3
 80060f8:	f1a7 0704 	sub.w	r7, r7, #4
 80060fc:	44a9      	add	r9, r5
 80060fe:	f47f af7e 	bne.w	8005ffe <arm_mat_inverse_f32+0x92>
 8006102:	eef5 6a40 	vcmp.f32	s13, #0.0
 8006106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800610a:	d006      	beq.n	800611a <arm_mat_inverse_f32+0x1ae>
 800610c:	2000      	movs	r0, #0
 800610e:	b007      	add	sp, #28
 8006110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006114:	44bb      	add	fp, r7
 8006116:	4428      	add	r0, r5
 8006118:	e7e4      	b.n	80060e4 <arm_mat_inverse_f32+0x178>
 800611a:	9b05      	ldr	r3, [sp, #20]
 800611c:	9a01      	ldr	r2, [sp, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	edd3 7a00 	vldr	s15, [r3]
 8006124:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006128:	fb02 f204 	mul.w	r2, r2, r4
 800612c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006130:	4614      	mov	r4, r2
 8006132:	bf08      	it	eq
 8006134:	3304      	addeq	r3, #4
 8006136:	d007      	beq.n	8006148 <arm_mat_inverse_f32+0x1dc>
 8006138:	e7e8      	b.n	800610c <arm_mat_inverse_f32+0x1a0>
 800613a:	ecf3 7a01 	vldmia	r3!, {s15}
 800613e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006146:	d1e1      	bne.n	800610c <arm_mat_inverse_f32+0x1a0>
 8006148:	f10e 0e01 	add.w	lr, lr, #1
 800614c:	4574      	cmp	r4, lr
 800614e:	d1f4      	bne.n	800613a <arm_mat_inverse_f32+0x1ce>
 8006150:	f06f 0004 	mvn.w	r0, #4
 8006154:	b007      	add	sp, #28
 8006156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800615a:	f06f 0002 	mvn.w	r0, #2
 800615e:	b007      	add	sp, #28
 8006160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006164:	4656      	mov	r6, sl
 8006166:	3f01      	subs	r7, #1
 8006168:	f846 bb04 	str.w	fp, [r6], #4
 800616c:	f47f af1b 	bne.w	8005fa6 <arm_mat_inverse_f32+0x3a>
 8006170:	e735      	b.n	8005fde <arm_mat_inverse_f32+0x72>
 8006172:	bf00      	nop
 8006174:	00000000 	.word	0x00000000

08006178 <arm_mat_init_f32>:
 8006178:	8001      	strh	r1, [r0, #0]
 800617a:	8042      	strh	r2, [r0, #2]
 800617c:	6043      	str	r3, [r0, #4]
 800617e:	4770      	bx	lr

08006180 <arm_mat_add_f32>:
 8006180:	b4f0      	push	{r4, r5, r6, r7}
 8006182:	e9d1 4700 	ldrd	r4, r7, [r1]
 8006186:	6803      	ldr	r3, [r0, #0]
 8006188:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800618c:	6856      	ldr	r6, [r2, #4]
 800618e:	42a3      	cmp	r3, r4
 8006190:	d15d      	bne.n	800624e <arm_mat_add_f32+0xce>
 8006192:	6812      	ldr	r2, [r2, #0]
 8006194:	4293      	cmp	r3, r2
 8006196:	d15a      	bne.n	800624e <arm_mat_add_f32+0xce>
 8006198:	8803      	ldrh	r3, [r0, #0]
 800619a:	8844      	ldrh	r4, [r0, #2]
 800619c:	fb04 f403 	mul.w	r4, r4, r3
 80061a0:	08a5      	lsrs	r5, r4, #2
 80061a2:	d032      	beq.n	800620a <arm_mat_add_f32+0x8a>
 80061a4:	f10c 0110 	add.w	r1, ip, #16
 80061a8:	f107 0210 	add.w	r2, r7, #16
 80061ac:	f106 0310 	add.w	r3, r6, #16
 80061b0:	4628      	mov	r0, r5
 80061b2:	ed12 7a04 	vldr	s14, [r2, #-16]
 80061b6:	ed51 7a04 	vldr	s15, [r1, #-16]
 80061ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061be:	3801      	subs	r0, #1
 80061c0:	ed43 7a04 	vstr	s15, [r3, #-16]
 80061c4:	ed12 7a03 	vldr	s14, [r2, #-12]
 80061c8:	ed51 7a03 	vldr	s15, [r1, #-12]
 80061cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061d0:	f101 0110 	add.w	r1, r1, #16
 80061d4:	ed43 7a03 	vstr	s15, [r3, #-12]
 80061d8:	ed12 7a02 	vldr	s14, [r2, #-8]
 80061dc:	ed51 7a06 	vldr	s15, [r1, #-24]	; 0xffffffe8
 80061e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061e4:	f102 0210 	add.w	r2, r2, #16
 80061e8:	ed43 7a02 	vstr	s15, [r3, #-8]
 80061ec:	ed51 7a05 	vldr	s15, [r1, #-20]	; 0xffffffec
 80061f0:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 80061f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061f8:	f103 0310 	add.w	r3, r3, #16
 80061fc:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8006200:	d1d7      	bne.n	80061b2 <arm_mat_add_f32+0x32>
 8006202:	012b      	lsls	r3, r5, #4
 8006204:	449c      	add	ip, r3
 8006206:	441f      	add	r7, r3
 8006208:	441e      	add	r6, r3
 800620a:	f014 0403 	ands.w	r4, r4, #3
 800620e:	d01b      	beq.n	8006248 <arm_mat_add_f32+0xc8>
 8006210:	edd7 7a00 	vldr	s15, [r7]
 8006214:	ed9c 7a00 	vldr	s14, [ip]
 8006218:	ee77 7a87 	vadd.f32	s15, s15, s14
 800621c:	3c01      	subs	r4, #1
 800621e:	edc6 7a00 	vstr	s15, [r6]
 8006222:	d011      	beq.n	8006248 <arm_mat_add_f32+0xc8>
 8006224:	eddc 7a01 	vldr	s15, [ip, #4]
 8006228:	ed97 7a01 	vldr	s14, [r7, #4]
 800622c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006230:	2c01      	cmp	r4, #1
 8006232:	edc6 7a01 	vstr	s15, [r6, #4]
 8006236:	d007      	beq.n	8006248 <arm_mat_add_f32+0xc8>
 8006238:	eddc 7a02 	vldr	s15, [ip, #8]
 800623c:	ed97 7a02 	vldr	s14, [r7, #8]
 8006240:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006244:	edc6 7a02 	vstr	s15, [r6, #8]
 8006248:	2000      	movs	r0, #0
 800624a:	bcf0      	pop	{r4, r5, r6, r7}
 800624c:	4770      	bx	lr
 800624e:	f06f 0002 	mvn.w	r0, #2
 8006252:	e7fa      	b.n	800624a <arm_mat_add_f32+0xca>

08006254 <__libc_init_array>:
 8006254:	b570      	push	{r4, r5, r6, lr}
 8006256:	4d0d      	ldr	r5, [pc, #52]	; (800628c <__libc_init_array+0x38>)
 8006258:	4c0d      	ldr	r4, [pc, #52]	; (8006290 <__libc_init_array+0x3c>)
 800625a:	1b64      	subs	r4, r4, r5
 800625c:	10a4      	asrs	r4, r4, #2
 800625e:	2600      	movs	r6, #0
 8006260:	42a6      	cmp	r6, r4
 8006262:	d109      	bne.n	8006278 <__libc_init_array+0x24>
 8006264:	4d0b      	ldr	r5, [pc, #44]	; (8006294 <__libc_init_array+0x40>)
 8006266:	4c0c      	ldr	r4, [pc, #48]	; (8006298 <__libc_init_array+0x44>)
 8006268:	f000 f820 	bl	80062ac <_init>
 800626c:	1b64      	subs	r4, r4, r5
 800626e:	10a4      	asrs	r4, r4, #2
 8006270:	2600      	movs	r6, #0
 8006272:	42a6      	cmp	r6, r4
 8006274:	d105      	bne.n	8006282 <__libc_init_array+0x2e>
 8006276:	bd70      	pop	{r4, r5, r6, pc}
 8006278:	f855 3b04 	ldr.w	r3, [r5], #4
 800627c:	4798      	blx	r3
 800627e:	3601      	adds	r6, #1
 8006280:	e7ee      	b.n	8006260 <__libc_init_array+0xc>
 8006282:	f855 3b04 	ldr.w	r3, [r5], #4
 8006286:	4798      	blx	r3
 8006288:	3601      	adds	r6, #1
 800628a:	e7f2      	b.n	8006272 <__libc_init_array+0x1e>
 800628c:	080062e4 	.word	0x080062e4
 8006290:	080062e4 	.word	0x080062e4
 8006294:	080062e4 	.word	0x080062e4
 8006298:	080062e8 	.word	0x080062e8

0800629c <memset>:
 800629c:	4402      	add	r2, r0
 800629e:	4603      	mov	r3, r0
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d100      	bne.n	80062a6 <memset+0xa>
 80062a4:	4770      	bx	lr
 80062a6:	f803 1b01 	strb.w	r1, [r3], #1
 80062aa:	e7f9      	b.n	80062a0 <memset+0x4>

080062ac <_init>:
 80062ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ae:	bf00      	nop
 80062b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062b2:	bc08      	pop	{r3}
 80062b4:	469e      	mov	lr, r3
 80062b6:	4770      	bx	lr

080062b8 <_fini>:
 80062b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ba:	bf00      	nop
 80062bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062be:	bc08      	pop	{r3}
 80062c0:	469e      	mov	lr, r3
 80062c2:	4770      	bx	lr
